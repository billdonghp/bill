/* Generated by Together */

package com.ait.evs;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.ait.util.DataAccessException;
import com.ait.util.ServiceLocator;
import com.ait.util.ServiceLocatorException;
import com.ait.util.SqlUtil;

public class EvsOtherItemDetail {
    private static ServiceLocator services;

    public EvsOtherItemDetail() {
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //增加项目
    public EvsOtherItemDetail(String evPeriodId, String evItemId,
            String evEmpId, float evDetailProp, List lEvOtherColumn) {
        this.evPeriodId = evPeriodId;
        this.evItemId = evItemId;
        this.evDetailProp = evDetailProp;
        this.evEmpId = evEmpId;
        this.lEvOtherColumn = lEvOtherColumn;
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 修改项目
    public EvsOtherItemDetail(int seq, float evDetailProp, List lEvOtherColumn) {
        this.seqEvOtherItemDetail=seq;
        this.evDetailProp = evDetailProp;
        this.lEvOtherColumn = lEvOtherColumn;
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //  删除项目
    public EvsOtherItemDetail(int seq) {

        this.seqEvOtherItemDetail=seq;
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * @return 返回 evDetailProp。
     */
    public float getEvDetailProp() {
        return evDetailProp;
    }

    /**
     * @param evDetailProp
     *            要设置的 evDetailProp。
     */
    public void setEvDetailProp(float evDetailProp) {
        this.evDetailProp = evDetailProp;
    }

    /**
     * @return 返回 evItemId。
     */
    public String getEvItemId() {
        return evItemId;
    }

    /**
     * @param evItemId
     *            要设置的 evItemId。
     */
    public void setEvItemId(String evItemId) {
        this.evItemId = evItemId;
    }

    /**
     * @return 返回 evItemName。
     */
    public String getEvItemName() {
        return evItemName;
    }

    /**
     * @param evItemName
     *            要设置的 evItemName。
     */
    public void setEvItemName(String evItemName) {
        this.evItemName = evItemName;
    }

    /**
     * @return 返回 evPeriodId。
     */
    public String getEvPeriodId() {
        return evPeriodId;
    }

    /**
     * @param evPeriodId
     *            要设置的 evPeriodId。
     */
    public void setEvPeriodId(String evPeriodId) {
        this.evPeriodId = evPeriodId;
    }

    /**
     * @return 返回 evEmpId。
     */
    public String getEvEmpId() {
        return evEmpId;
    }

    /**
     * @param evEmpId
     *            要设置的 evEmpId。
     */
    public void setEvEmpId(String evEmpId) {
        this.evEmpId = evEmpId;
    }

    /**
     * @return 返回 evEmpName。
     */
    public String getEvEmpName() {
        return evEmpName;
    }

    /**
     * @param evEmpName
     *            要设置的 evEmpName。
     */
    public void setEvEmpName(String evEmpName) {
        this.evEmpName = evEmpName;
    }

    /**
     * @return 返回 seqEvOtherItemDetail。
     */
    public int getSeqEvOtherItemDetail() {
        return seqEvOtherItemDetail;
    }

    /**
     * @param seqEvOtherItemDetail
     *            要设置的 seqEvOtherItemDetail。
     */
    public void setSeqEvOtherItemDetail(int seqEvOtherItemDetail) {
        this.seqEvOtherItemDetail = seqEvOtherItemDetail;
    }

    /**
     * @return 返回 lEvsOtherColumn。
     */
    public List getLEvOtherColumn() {
        return lEvOtherColumn;
    }

    /**
     * @param evsOtherColumn
     *            要设置的 lEvsOtherColumn。
     */
    public void setLEvsOtherColumn(List evOtherColumn) {
        lEvOtherColumn = evOtherColumn;
    }
/*
    //设置相应项项目的列数
    private String SET_EVCOMMIN_ITEM_COLUMNS = "SELECT * FROM evs_column WHERE ev_period_id=? AND ev_emp_id=? AND ev_item_id=? ";

    private void setEvOtherItemColumns() {

    }
*/
    //增加项目
    private String ADD_EV_OTHER_ITEM = " INSERT INTO evs_item_detail (seq_ev_item_detail," +
    		" ev_period_id,ev_item_id,ev_detail_prop, ev_detail_order,ev_emp_id)" +
    		" VALUES (evs_item_detail_seq.NEXTVAL,?,?,?,evs_item_detail_seq.NEXTVAL,?)";

    public void addEvOtherItem() throws DataAccessException {
        if (checkNull()) {
            return;
        }
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            con.setAutoCommit(false);
            this.addEvOtherItem(con);
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for addEvOtherItem statistics", sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for addEvOtherItem statistics", sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }

    public void addEvOtherItem(Connection con) throws DataAccessException {

        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            pstmt = con.prepareStatement(ADD_EV_OTHER_ITEM);
            pstmt.setString(1, this.evPeriodId);
            pstmt.setString(2, this.evItemId);
            pstmt.setFloat(3, this.evDetailProp);
            pstmt.setString(4, this.evEmpId);
            pstmt.execute();
            pstmt = null;
            
            pstmt = con.prepareStatement("SELECT evs_item_detail_seq.currval as seq FROM dual");
            rs = pstmt.executeQuery();
            this.seqEvOtherItemDetail = -1;
            if (rs.next()) {
                this.seqEvOtherItemDetail = rs.getInt("seq");
            }
            if (this.seqEvOtherItemDetail == -1) {
                con.rollback();
            } else {
                int evsOtherColumnSize = this.lEvOtherColumn.size();
                for (int i = 0; i < evsOtherColumnSize; i++) {
                    EvsOtherColumn evOtherColumn = (EvsOtherColumn) lEvOtherColumn
                            .get(i);
                    evOtherColumn
                            .setseqEvOtherItemDetail(this.seqEvOtherItemDetail);
                    evOtherColumn.addEvOtherColumn(con);
                }
            }
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for addEvOtherItem statistics", sqle);
        } finally {
            SqlUtil.close(rs, pstmt);
        }

    }

    //更新评价项项目
    private final static String UPDATE_EV_OTHER_ITEM = "UPDATE evs_item_detail SET ev_detail_prop=? WHERE seq_ev_item_detail=? ";

    public void updateEvOtherItem() throws DataAccessException {

        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            con.setAutoCommit(false);
            this.updateEvOtherItem(con);
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for updateEvOtherItem statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for updateEvOtherItem statistics",
                    sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }

    public void updateEvOtherItem(Connection con) throws DataAccessException {

        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement(UPDATE_EV_OTHER_ITEM);
            pstmt.setFloat(1, this.evDetailProp);
            pstmt.setInt(2, this.seqEvOtherItemDetail);
            pstmt.execute();
            int evsOtherColumnSize = this.lEvOtherColumn.size();
            for (int i = 0; i < evsOtherColumnSize; i++) {
                EvsOtherColumn evOtherColumn = (EvsOtherColumn) lEvOtherColumn
                        .get(i);
                evOtherColumn
                        .setseqEvOtherItemDetail(this.seqEvOtherItemDetail);
                evOtherColumn.updateEvOtherColumn(con);
            }
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for updateEvOtherItem statistics",
                    sqle);
        } finally {
            SqlUtil.close(pstmt, null);
        }
    }

    //删除评价项目
    private final static String DEL_EV_OTHER_ITEM = " DELETE evs_item_detail WHERE seq_ev_item_detail=?";

    public void delEvOtherItem() throws DataAccessException {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            con.setAutoCommit(false);
            this.delEvOtherItem(con);
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for delEvOtherItem statistics", sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for delEvOtherItem statistics", sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }

    public void delEvOtherItem(Connection con) throws DataAccessException {

        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement(DEL_EV_OTHER_ITEM);
            pstmt.setInt(1, this.seqEvOtherItemDetail);
            pstmt.execute();
            EvsOtherColumn evOtherColumn = new EvsOtherColumn(
                    this.seqEvOtherItemDetail);
            evOtherColumn.delEvOtherColumn(con);

        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for updateEvOtherItem statistics",
                    sqle);
        } finally {
            SqlUtil.close(pstmt, null);
        }
    }

    private boolean checkNull() {
        if (evItemId == null || evItemId.equals("") || evPeriodId == null
                || evPeriodId.equals("") || evEmpId == null
                || evEmpId.equals("") || this.lEvOtherColumn == null) {
            return true;
        }
        return false;
    }

    private int seqEvOtherItemDetail;

    private String evPeriodId;

    private float evDetailProp;

    private String evItemId;

    private String evItemName;

    private String evEmpId;

    private String evEmpName;

    private List lEvOtherColumn;
}