/* Generated by Together */

package com.ait.evs;

import java.io.Serializable;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.ait.util.DataAccessException;
import com.ait.util.ServiceLocator;
import com.ait.util.ServiceLocatorException;
import com.ait.util.SqlUtil;

public class EvsDept implements Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static ServiceLocator services;

    public EvsDept() {
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public EvsDept(String evDept, String evDeptName) {
        this.evDeptID = evDept;
        this.evDeptName = evDeptName;
    }
    public String getEvPeriodID() {
        return evPeriodID;
    }

    public void setEvPeriodID(String evPeriodID) {
        this.evPeriodID = evPeriodID;
    }

    public String getEvDeptID() {
        return evDeptID;
    }

    public void setEvDeptID(String evDeptID) {
        this.evDeptID = evDeptID;
    }

    public String getEvDeptName() {
        return evDeptName;
    }

    public void setEvDeptName(String evDeptName) {
        this.evDeptName = evDeptName;
    }

    public int getEvDeptLevel() {
        return evDeptLevel;
    }

    public void setEvDeptLevel(int evDeptLevel) {
        this.evDeptLevel = evDeptLevel;
    }

    public String getEvParentDeptID() {
        return evParentDeptID;
    }

    public void setEvParentDeptID(String evParentDeptID) {
        this.evParentDeptID = evParentDeptID;
    }

    public String getEvDeptGradeID() {
        return evDeptGradeID;
    }

    public void setEvDeptGradeID(String evDeptGradeID) {
        this.evDeptGradeID = evDeptGradeID;
    }

    public int getEvDeptNorm() {
        return evDeptNorm;
    }

    public void setEvDeptNorm(int evDeptNorm) {
        this.evDeptNorm = evDeptNorm;
    }

    public int getActivity() {
        return activity;
    }

    public void setActivity(int activity) {
        this.activity = activity;
    }

    private final static String GET_PERIOD_LIST = " SELECT * FROM EVS_PERIOD WHERE ev_period_id IN(SELECT DISTINCT ev_period_id FROM EVS_DEPT_v) ";

    /**
     * 评价期间列表
     * 
     * @return
     * @throws DataAccessException
     */
    public List getPeroidList() throws DataAccessException {
        List lEvPeriod = new Vector();
        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(GET_PERIOD_LIST);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                EvsPeriod evsPeriod = new EvsPeriod();
                evsPeriod.setEvPeriodID(rs.getString("ev_period_id"));
                evsPeriod.setEvPeriodName(rs.getString("ev_period_name"));
                evsPeriod.setEvYear(rs.getString("ev_year"));
                lEvPeriod.add(evsPeriod);
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getPeroidList statistics", sqle);
        } catch (ServiceLocatorException sle) {
            throw new DataAccessException(
                    "cant get connection for getPeroidList statistics", sle);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return lEvPeriod;
    }

    /**
     * 取得评价部门列表
     * 
     * @param evPeriodId
     * @return
     * @throws DataAccessException
     */
    public List getDeptByPeriodId(String evPeriodId) throws DataAccessException {
        List lEvDept = new Vector();
        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        //String SELECT_SQL = "SELECT /* INDEX (evs_dept pk_evs_dept)*/ * FROM evs_dept_v ";
        String WHERE_SQL="";
        if (!evPeriodId.trim().equals("")) {
        	WHERE_SQL=" WHERE  evs_dept_v.ev_period_id='" + evPeriodId + "'";
        }
        String SELECT_SQL =
        	"	SELECT     *											"+
        	"	FROM (SELECT evs_dept_v.ev_period_id, evs_dept_v.ev_dept_id,"+
            "        evs_dept_v.ev_dept_name, evs_dept_v.ev_dept_level,"+
            "        evs_dept_v.ev_parent_dept_id, evs_dept_v.ev_dept_grade_id,"+
            "        evs_dept_v.ev_dept_grade_name, evs_dept_v.ev_dept_norm,"+
            "        evs_dept_v.activity, hr_department.deptid,"+
            "        hr_department.orderno, hr_department.dept_level"+
            "   FROM evs_dept_v INNER JOIN hr_department ON hr_department.deptid ="+
            "                                                 evs_dept_v.ev_dept_id"
            +WHERE_SQL+
            "	) d																		"+
        	"	 START WITH d.ev_parent_dept_id IN (SELECT cpny_id						"+
            "                           FROM hr_company t  where t.cpny_id = '78000000')								"+
//            "                           	CONNECT BY PRIOR d.ev_dept_id = d.ev_parent_dept_id	"+
            "                           	CONNECT BY  d.ev_dept_id = d.ev_parent_dept_id	"+
        	"	ORDER SIBLINGS BY d.orderno, d.dept_level DESC, d.deptid ";
        
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(SELECT_SQL);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                EvsDept evsDept = new EvsDept();
                evsDept.setEvPeriodID(rs.getString("ev_period_id"));
                evsDept.setEvDeptID(rs.getString("ev_dept_id"));
                evsDept.setEvDeptLevel(rs.getInt("ev_dept_level"));
                evsDept.setEvDeptName(rs.getString("ev_dept_name"));
                evsDept.setActivity(rs.getInt("Activity"));
                evsDept.setEvDeptGradeID(rs.getString("ev_dept_grade_id"));
                evsDept.setEvDeptGradeName(rs.getString("ev_dept_grade_name"));
                lEvDept.add(evsDept);
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getDeptByPeriodId statistics", sqle);
        } catch (ServiceLocatorException sle) {
            throw new DataAccessException(
                    "cant get connection for getDeptByPeriodId statistics", sle);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return lEvDept;
    }

    private final static String UPDATE_DEPT_ACTIVITY = "UPDATE evs_dept SET activity=? WHERE ev_dept_id=? and ev_period_id=? ";

    /**
     * 更新评价部门活越性
     * 
     * @param evPeriodId
     * @param deptId
     * @throws DataAccessException
     */
    public void updateDeptActivity(String deptId, String evPeriodId,
            int activity) throws DataAccessException {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(UPDATE_DEPT_ACTIVITY);
            pstmt.setInt(1, activity);
            pstmt.setString(2, deptId);
            pstmt.setString(3, evPeriodId);
            pstmt.executeUpdate();

        } catch (SQLException sqle) {

            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for updateDeptActivity statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {

            throw new DataAccessException(
                    "cant get connection for updateDeptActivity statistics",
                    sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }

    private final static String UPDATE_DEPT_GRADE_ID = "UPDATE evs_dept SET ev_dept_grade_id=? WHERE ev_dept_id=? and ev_period_id=? ";

    /**
     * 更新评价部门等级
     * 
     * @param evPeriodId
     * @param deptId
     * @throws DataAccessException
     */
    public void updateDeptGradeId(String evDeptGradeId, String deptId,
            String evPeriodId) throws DataAccessException {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(UPDATE_DEPT_GRADE_ID);
            pstmt.setString(1, evDeptGradeId);
            pstmt.setString(2, deptId);
            pstmt.setString(3, evPeriodId);
            pstmt.executeUpdate();

        } catch (SQLException sqle) {

            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for updateDeptGradeId statistics", sqle);
        } catch (ServiceLocatorException sle) {

            throw new DataAccessException(
                    "cant get connection for updateDeptGradeId statistics", sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }

    //    public Hashtable getDeptRadio(String periodID,String deptID,String
    // deptGradeID,String gradeID) {
    //    }
    //
    //    public Vector getDeptRadioList(String periodID,String deptID) {
    //    }

    public void modifyDeptRadio(String periodID, String deptID,
            String deptGradeID, String gradeID, float gradeProp, float wageRadio) {
    }

    public int addEvsDept(String evPeriodId) throws DataAccessException {
        Connection con = null;
        CallableStatement cstmt = null;
        int i = 0;
        try {
            con = services.getConnection();
            cstmt = con.prepareCall("{call Evs_Dept_Fill_P(?, ?)}");
            cstmt.setString(1, evPeriodId);
            cstmt.registerOutParameter(2, java.sql.Types.INTEGER);
            cstmt.execute();
            i = cstmt.getInt(2);

        } catch (SQLException sqle) {

            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for addEvsDept statistics", sqle);
        } catch (ServiceLocatorException sle) {

            throw new DataAccessException(
                    "cant get connection for addEvsDept statistics", sle);
        } finally {
            if (cstmt != null) {
                try {
                    cstmt.close();
                    cstmt = null;
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            SqlUtil.close(con);
        }
        return i;

    }

    private final static String GET_DEPTGRADEID_BY_DEPTPERIOD = " SELECT /* INDEX (evs_dept pk_evs_dept)*/ * FROM evs_dept "
            + " WHERE ev_period_id=? AND ev_dept_id=? ";

    /**
     * 取得评价部门相应评价季度的等级
     * 
     * @param evPeriodId
     * @return
     * @throws DataAccessException
     */
    public String getDeptGradeIdByDeptPeriod(String evPeriodId, String evDeptId)
            throws DataAccessException {
        String evDeptGradeId = "";
        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(GET_DEPTGRADEID_BY_DEPTPERIOD);
            pstmt.setString(1, evPeriodId);
            pstmt.setString(2, evDeptId);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                evDeptGradeId = rs.getString("ev_dept_grade_id");
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getDeptGradeIdByDeptPeriod statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            throw new DataAccessException(
                    "cant get connection for getDeptGradeIdByDeptPeriod statistics",
                    sle);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return evDeptGradeId;
    }

    private String evPeriodID;

    private String evDeptID;

    private String evDeptName;

    private int evDeptLevel;

    private String evParentDeptID;

    private String evDeptGradeID;

    private String evDeptGradeName;

    private int evDeptNorm;

    private int activity;

    /**
     * @return 返回 evDeptGradeName。
     */
    public String getEvDeptGradeName() {
        return evDeptGradeName;
    }

    /**
     * @param evDeptGradeName
     *            要设置的 evDeptGradeName。
     */
    public void setEvDeptGradeName(String evDeptGradeName) {
        this.evDeptGradeName = evDeptGradeName;
    }
}