/* Generated by Together */

package com.ait.evs;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;

import com.ait.sqlmap.util.SimpleMap;
import com.ait.util.DataAccessException;
import com.ait.util.ServiceLocator;
import com.ait.util.ServiceLocatorException;
import com.ait.util.SqlUtil;
import com.ait.util.StringUtil;

public class EvsItem implements Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static ServiceLocator services;

    public EvsItem() {
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public EvsItem(String evPeriodId, String evTypeId, String evItemId,
            String evItemName, int evItemOrder) {
        this.evItemID = evItemId;
        this.evPeriodID = evPeriodId;
        this.evTypeID = evTypeId;
        this.evItemName = evItemName;
        this.evItemOrder = evItemOrder;
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public EvsItem(String evPeriodId, String evTypeId) {

        this.evPeriodID = evPeriodId;
        this.evTypeID = evTypeId;

        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public EvsItem(String evPeriodId,String evTypeId,String evItemId,List lItemColumns) {
        this.evPeriodID = evPeriodId;
        this.evTypeID = evTypeId;
        this.evItemID = evItemId;
        this.lItemColumns=lItemColumns;
        try {
            services = ServiceLocator.getInstance();
        } catch (ServiceLocatorException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String getEvPeriodID() {
        return evPeriodID;
    }

    public void setEvPeriodID(String evPeriodID) {
        this.evPeriodID = evPeriodID;
    }

    public String getEvTypeID() {
        return evTypeID;
    }

    public void setEvTypeID(String evTypeID) {
        this.evTypeID = evTypeID;
    }

    public String getEvItemID() {
        return evItemID;
    }

    public void setEvItemID(String evItemID) {
        this.evItemID = evItemID;
    }

    public String getEvItemName() {
        return evItemName;
    }

    public void setEvItemName(String evItemName) {
        this.evItemName = evItemName;
    }

    public int getEvItemOrder() {
        return evItemOrder;
    }
    
    /**
     * @return 返回 evTypeName。
     */
    public String getEvTypeName() {
        return evTypeName;
    }
    /**
     * @param evTypeName 要设置的 evTypeName。
     */
    public void setEvTypeName(String evTypeName) {
        this.evTypeName = evTypeName;
    }
    public void setEvItemOrder(int evItemOrder) {
        this.evItemOrder = evItemOrder;
    }
     
    /**
     * @return 返回 lItemColumns。
     */
    public List getLItemColumns() {
        return lItemColumns;
    }
    /**
     * @param itemColumns 要设置的 lItemColumns。
     */
    public void setLItemColumns(List itemColumns) {
        lItemColumns = itemColumns;
    }
    
    private final static String DEL_EVS_TYPEITEM = "DELETE evs_type_item "
            + " WHERE ev_period_id=? AND ev_type_id=? AND ev_item_id=? ";

    private final static String DEL_RELATION = " DELETE evs_relation "
            + " WHERE ev_type_id=? AND ev_period_id=? " + " AND ev_item_id=? ";

    /**
     * 删除评价项目评价类型关系并删除相关EVS_RELATION 表中信息
     * 
     * @throws DataAccessException
     */
    public void delEvsTypeItem() throws DataAccessException {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            con.setAutoCommit(false);
            pstmt = con.prepareStatement(DEL_RELATION);
            pstmt.setString(1, this.evTypeID);
            pstmt.setString(2, this.evPeriodID);
            pstmt.setString(3, this.evItemID);
            pstmt.executeUpdate();
            pstmt = null;
            pstmt = con.prepareStatement(DEL_EVS_TYPEITEM);
            pstmt.setString(1, this.evPeriodID);
            pstmt.setString(2, this.evTypeID);
            pstmt.setString(3, this.evItemID);
            pstmt.executeUpdate();
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for delEvsTypeItem statistics", sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for delEvsTypeItem statistics", sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }

    private void delEvsTypeItem(Connection con) throws DataAccessException {
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement(DEL_RELATION);
            pstmt.setString(1, this.evTypeID);
            pstmt.setString(2, this.evPeriodID);
            pstmt.setString(3, this.evItemID);
            pstmt.executeUpdate();
            pstmt = null;
            pstmt = con.prepareStatement(DEL_EVS_TYPEITEM);
            pstmt.setString(1, this.evPeriodID);
            pstmt.setString(2, this.evTypeID);
            pstmt.setString(3, this.evItemID);
            pstmt.executeUpdate();

        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for delEvsTypeItem statistics", sqle);
        } finally {
            if (pstmt != null) {
                try {
                    pstmt.close();
                    pstmt = null;
                } catch (SQLException se) {
                }
            }
        }
    }

    private final static String ADD_EVS_TYPEITEM = " INSERT INTO "
            + " evs_type_item(ev_type_id,ev_period_id,ev_item_id,ev_item_order)"
            + " VALUES (?,?,?,?)";

    /**
     * 添加评价项目评价类型关系
     * 
     * @throws DataAccessException
     */
    public void addEvsTypeItem() throws DataAccessException {
        Connection con = null;
        PreparedStatement pstmt = null;
        try {
            con = services.getConnection();
            con.setAutoCommit(false);
            this.delEvsTypeItem(con);
            pstmt = con.prepareStatement(ADD_EVS_TYPEITEM);
            pstmt.setString(1, this.evTypeID);
            pstmt.setString(2, this.evPeriodID);
            pstmt.setString(3, this.evItemID);
            pstmt.setInt(4, this.evItemOrder);
            pstmt.executeUpdate();
            con.commit();
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            ex.printStackTrace();
            throw new DataAccessException("cant add addPeriod exception; ", ex);
        } catch (ServiceLocatorException ex) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for adding addPeriod");
        } finally {
            SqlUtil.close(pstmt,con);
        }
    }

    private final static String GET_ITEM_BY_TYPEPERIOD = "SELECT * FROM evs_type_item_v "
            + "WHERE ev_period_id=? AND ev_type_id=? ORDER BY ev_item_order ";

    /**
     * 取得相应评价类型评价季度的评价的项目列表
     * 
     * @return
     * @throws DataAccessException
     * @throws ServiceLocatorException
     */
    public List getItemByTypePeriod() throws DataAccessException{
        List lEvItem = new Vector();
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(GET_ITEM_BY_TYPEPERIOD);
            pstmt.setString(1, this.evPeriodID);
            pstmt.setString(2, this.evTypeID);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                EvsItem evsItem = new EvsItem();
                evsItem.setEvItemID(rs.getString("ev_item_id"));
                evsItem.setEvItemName(rs.getString("ev_item_name"));
                evsItem.setEvItemOrder(rs.getInt("ev_item_order"));
                evsItem.setEvPeriodID(rs.getString("ev_period_id"));
                evsItem.setEvTypeID(rs.getString("ev_type_id"));
                lEvItem.add(evsItem);
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getItemByTypePeriod statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            throw new DataAccessException(
                    "cant get connection for getItemByTypePeriod statistics",
                    sle);
        }finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return lEvItem;
    }
    //取得相应评价期间相应评价类型的评价项目列表
    private final static String GET_ITEMLIST=" SELECT DISTINCT EVS_RELATION.ev_item_id,SY_CODE.code_name AS ev_item_name " +
    		" FROM EVS_RELATION INNER JOIN SY_CODE ON EVS_RELATION.ev_item_id = SY_CODE.code_id " +
    		" AND SY_CODE.PARENT_CODE = 'EVITEM' " +
    		" WHERE  ev_period_id=? AND ev_type_id=?  ";
    public List getItemListByTypePeriod(String evPeriodId, String evTypeId) throws DataAccessException {
        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        List lItemList = new Vector();
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(GET_ITEMLIST);
            pstmt.setString(1, evPeriodId);
            pstmt.setString(2, evTypeId);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                HashMap mItem = new HashMap();
                mItem.put("itemId", rs.getString("ev_item_id"));
                mItem.put("itemName", rs.getString("ev_item_name"));
                lItemList.add(mItem);
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getItemListByTypePeriod statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            throw new DataAccessException(
                    "cant get connection for getItemListByTypePeriod statistics",
                    sle);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return lItemList;
    }
    
    //  取得操作方式为内容输入的评价项目
    private final static String GET_ITEMLIST_BY_PERIODTYPE = " SELECT evs_relation.ev_item_id,sy_code.code_name AS ev_item_name FROM evs_relation "
            + " INNER JOIN sy_code ON evs_relation.ev_item_id = sy_code.code_id AND SY_CODE.PARENT_CODE = 'EVITEM'"
            + " WHERE  ev_period_id=? AND ev_type_id=?  AND ev_process_id=?  AND ev_operate_id=? ";

    public List getItemListByTypePeriod(String evPeriodId, String evTypeId,
            String evProcessId) throws DataAccessException {
        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        List lItemList = new Vector();
        try {
            con = services.getConnection();
            pstmt = con.prepareStatement(GET_ITEMLIST_BY_PERIODTYPE);
            pstmt.setString(1, evPeriodId);
            pstmt.setString(2, evTypeId);
            pstmt.setString(3, evProcessId);
            pstmt.setString(4, Constants.EVOPERATE001);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                HashMap mItem = new HashMap();
                mItem.put("itemId", rs.getString("ev_item_id"));
                mItem.put("itemName", rs.getString("ev_item_name"));
                lItemList.add(mItem);
            }
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getItemListByTypePeriod statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            throw new DataAccessException(
                    "cant get connection for getItemListByTypePeriod statistics",
                    sle);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return lItemList;
    }
    /**
     * 取得项目列表
     * @author AIT  Administrator
     */
    public List getItemColumnList() throws DataAccessException{
        String sql_period="";
        String sql_type="";
        if(!"".equals(this.evPeriodID.trim())){
            sql_period=" AND ev_period_id='"+this.evPeriodID+"'";
        }
        if(!"".equals(this.evTypeID.trim())){
            sql_type=" AND ev_type_id='"+this.evTypeID+"'";
        }
        String sql_select="SELECT distinct ev_period_id,ev_type_id,get_sys_code(ev_type_id) AS ev_type_name," +
        		" ev_item_id, get_sys_code(ev_item_id) AS ev_item_name " +
        		" FROM evs_column WHERE ev_period_id is not null "+sql_period+sql_type;
        Connection con=null;
        PreparedStatement pstmt=null;
        ResultSet rs=null;
        List lItemList=new Vector();
        try{
            con=services.getConnection();
            con.setAutoCommit(false);
            pstmt=con.prepareStatement(sql_select);
            rs=pstmt.executeQuery();
            EvsColumn evsColumn=new EvsColumn();
            while(rs.next()){
                 EvsItem evsItem=new EvsItem();
                 evsItem.setEvItemID(rs.getString("ev_item_id"));
                 evsItem.setEvItemName(rs.getString("ev_item_name"));
                 evsItem.setEvPeriodID(rs.getString("ev_period_id"));
                 evsItem.setEvTypeID(rs.getString("ev_type_id"));
                 evsItem.setEvTypeName(rs.getString("ev_type_name"));
                 evsItem.setLItemColumns(evsColumn.getItemColumns(con,rs.getString("ev_period_id"),rs.getString("ev_type_id"),rs.getString("ev_item_id")));
                 lItemList.add(evsItem);
            }
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getItemListByTypePeriod statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for getItemListByTypePeriod statistics",
                    sle);
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
        return lItemList;
    }
    
    /**
     * 取得项目列表
     * @author AIT  Administrator
     */
    public void getItemColumn(String evItemId) throws DataAccessException{
        String sql_period="";
        String sql_type="";
        String sql_item="";
        if(!"".equals(this.evPeriodID.trim())){
            sql_period=" AND ev_period_id='"+this.evPeriodID+"'";
        }
        if(!"".equals(this.evTypeID.trim())){
            sql_type=" AND ev_type_id='"+this.evTypeID+"'";
        }
        if(!"".equals(evItemId.trim())){
            sql_item=" AND ev_item_id='"+evItemId+"'";
        }
        String sql_select="SELECT distinct ev_period_id,ev_type_id,get_sys_code(ev_type_id) AS ev_type_name," +
        		" ev_item_id, get_sys_code(ev_item_id) AS ev_item_name " +
        		" FROM evs_column WHERE ev_period_id is not null "+sql_period+sql_type+sql_item;
        Connection con=null;
        PreparedStatement pstmt=null;
        ResultSet rs=null;
        try{
            con=services.getConnection();
            con.setAutoCommit(false);
            pstmt=con.prepareStatement(sql_select);
            rs=pstmt.executeQuery();
            EvsColumn evsColumn=new EvsColumn();
            if(rs.next()){
                 this.setEvItemID(rs.getString("ev_item_id"));
                 this.setEvItemName(rs.getString("ev_item_name"));
                 this.setEvPeriodID(rs.getString("ev_period_id"));
                 this.setEvTypeID(rs.getString("ev_type_id"));
                 this.setEvTypeName(rs.getString("ev_type_name"));
                 this.setLItemColumns(evsColumn.getItemColumns(con,rs.getString("ev_period_id"),rs.getString("ev_type_id"),rs.getString("ev_item_id")));
            }
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getItemColumn statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for getItemColumn statistics",
                    sle);
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
    }
    //更新评价项目列关系
    private static final String DELETE_ITEMCOLUMN=" DELETE evs_column WHERE ev_period_id=? " +
    		" and ev_type_id=? and ev_item_id=? ";
    private static final String ADD_ITEMCOLUMN="INSERT INTO evs_column (ev_period_id,ev_type_id,ev_item_id,ev_column_id)" +
    		" VALUES (?,?,?,?)";
    public void updateItemColumn()throws DataAccessException{
        
        if(this.evItemID.equals("")||this.evPeriodID.equals("")||this.evTypeID.equals("")||this.lItemColumns==null){
            return;
        }
        Connection con=null;
        PreparedStatement pstmt=null;
        ResultSet rs=null;
        try{
            con=services.getConnection();
            con.setAutoCommit(false);
            pstmt=con.prepareStatement(DELETE_ITEMCOLUMN);
            pstmt.setString(1,this.evPeriodID);
            pstmt.setString(2,this.evTypeID);
            pstmt.setString(3,this.evItemID);
            pstmt.executeUpdate();
            
            int ItemColumnSize=this.lItemColumns.size();
            for(int i=0;i<ItemColumnSize;i++){
                EvsColumn evsColumn=(EvsColumn)lItemColumns.get(i);
                String evColumnId=evsColumn.getEvColumnId();
                pstmt=null;
                pstmt=con.prepareStatement(ADD_ITEMCOLUMN);
                pstmt.setString(1,this.evPeriodID);
                pstmt.setString(2,this.evTypeID);
                pstmt.setString(3,this.evItemID);
                pstmt.setString(4,evColumnId);
                pstmt.executeUpdate();
            }
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for getItemListByTypePeriod statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for getItemListByTypePeriod statistics",
                    sle);
        } finally {
            SqlUtil.close(rs, pstmt, con);
        }
    }
    
    //删除项目列
    public void delItemColumn()throws DataAccessException{
        
        if(this.evItemID.equals("")||this.evPeriodID.equals("")||this.evTypeID.equals("")||this.lItemColumns!=null){
            return;
        }
        Connection con=null;
        PreparedStatement pstmt=null;
        try{
            con=services.getConnection();
            con.setAutoCommit(false);
            pstmt=con.prepareStatement(DELETE_ITEMCOLUMN);
            pstmt.setString(1,this.evPeriodID);
            pstmt.setString(2,this.evTypeID);
            pstmt.setString(3,this.evItemID);
            pstmt.executeUpdate();
            con.commit();
        } catch (SQLException sqle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            sqle.printStackTrace();
            throw new DataAccessException(
                    "cant execute query for delItemColumn statistics",
                    sqle);
        } catch (ServiceLocatorException sle) {
            try {
                con.rollback();
            } catch (SQLException e) {
            }
            throw new DataAccessException(
                    "cant get connection for delItemColumn statistics",
                    sle);
        } finally {
            SqlUtil.close(pstmt, con);
        }
    }
    /**
     * 取得当前流程期间类型下的项目
     * @return
     * @throws DataAccessException 
     */
   
    public List<EvsItem> getItems(SimpleMap map) throws DataAccessException{
	List<EvsItem> lEvsItem=new ArrayList<EvsItem>();
        String A_PERIOD_SQL = "";
        String A_TYPE_SQL = "";
        String B_PROCESS_SQL = "";
	if (!StringUtil.checkNull(map.getString("PERIODID")).equals("")) {
		A_PERIOD_SQL = " AND a.ev_period_id='" + map.get("PERIODID") + "' ";
        }
        
        if (!StringUtil.checkNull(map.getString("TYPEID")).equals("")) {
            A_TYPE_SQL = " AND a.ev_type_id='" + map.get("TYPEID") + "' ";
        }else{
            A_TYPE_SQL = " AND (a.ev_type_id ='EVTYPE001' or a.ev_type_id='EVTYPE004')";
        }
        
        if (!StringUtil.checkNull(map.getString("PROCESSID")).equals("")) {
            B_PROCESS_SQL = " AND b.ev_process_id='" + map.get("PROCESSID")+ "' ";
            
        }
        StringBuffer sql=new StringBuffer();
        
        sql.append("SELECT   a.*, b.ev_marks_value, b.ev_marks_name, b.ev_process_id, ");
        sql.append("	    	c.code_name ev_process_name, b.ev_operate_id, ");
        sql.append("		d.code_name ev_operate_name, b.ev_marks_default ");
        sql.append("	FROM evs_type_item_v a, evs_relation b, sy_code c, sy_code d ");
        sql.append("	WHERE b.ev_item_id = a.ev_item_id ");
        sql.append("	AND b.ev_period_id = a.ev_period_id ");
        sql.append("	AND b.ev_type_id = a.ev_type_id ");
        sql.append("	AND b.ev_process_id = c.code_id(+) ");
        sql.append("	AND b.ev_operate_id = d.code_id(+) ");
        sql.append(A_PERIOD_SQL);
        sql.append(A_TYPE_SQL);
        sql.append(B_PROCESS_SQL);
        sql.append("	AND b.EV_OPERATE_ID in ('EVOPERATE003','EVOPERATE005','EVOPERATE009') ");
        sql.append(" ORDER BY a.ev_item_order ");

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
		con = services.getConnection();
		pstmt = con.prepareStatement(sql.toString());
		Logger.getLogger(this.getClass()).debug(sql.toString());
		rs = pstmt.executeQuery();
		while (rs.next()) {
                     EvsItem evsItem=new EvsItem();
                     evsItem.setEvItemID(rs.getString("ev_item_id"));
                     evsItem.setEvItemName(rs.getString("ev_item_name"));
                     evsItem.setEvPeriodID(rs.getString("ev_period_id"));
                     evsItem.setEvTypeID(rs.getString("ev_type_id"));
                     evsItem.setEvTypeName(rs.getString("ev_type_name"));
                     
                     List<EvsMark> lMark=null;
                     String sMarkValue=StringUtil.checkNull(rs.getString("ev_marks_value"));
                     String sMarkName=StringUtil.checkNull(rs.getString("ev_marks_name"));
                     String defaultMark=StringUtil.checkNull(rs.getString("ev_marks_default"));
                     String [] aMarkValue=sMarkValue.split(",");
                     String [] aMarkName=sMarkName.split(",");
                     if(null!=aMarkValue&&null!=aMarkName){
                	 lMark=new ArrayList<EvsMark>();
                	 for(int i=0,j=aMarkValue.length;i<j;i++){
                	     EvsMark mark=new EvsMark();
                	     mark.setValue(StringUtil.checkNull(aMarkValue[i]));
                	     try{
                		 mark.setName(StringUtil.checkNull(aMarkName[i]));
                	     }catch(Exception e){
                		 mark.setName(StringUtil.checkNull(aMarkName[i],"无"));
                	     }
                      	     mark.setDefaultValue(StringUtil.checkNull(aMarkValue[i]).equals(defaultMark));
                	     lMark.add(mark);
                	 }
                     }
                     evsItem.setLItemProcessMarks(lMark);
                     lEvsItem.add(evsItem);
		}
	} catch (SQLException sqle) {
		sqle.printStackTrace();
		throw new DataAccessException(
				"cant execute query for getItems statistics",
				sqle);
	}catch (ServiceLocatorException sqle) {
		sqle.printStackTrace();
		throw new DataAccessException(
				"cant execute query for getItems statistics",
				sqle);
	} finally {
		SqlUtil.close(rs, pstmt, con);
	}
	    return lEvsItem;
    }
    /**
     * 取得当前流程期间类型下的项目
     * @return
     * @throws DataAccessException 
     */
   
    public List<EvsItem> getEmpItemMarkPro(SimpleMap map) throws DataAccessException{
	List<EvsItem> lEvsItem=new ArrayList<EvsItem>();
        String A_PERIOD_SQL = "";
        String A_TYPE_SQL = "";
        String B_PROCESS_SQL = "";
	if (!StringUtil.checkNull(map.getString("PERIODID")).equals("")) {
		A_PERIOD_SQL = " AND a.ev_period_id='" + map.get("PERIODID") + "' ";
        }
        
        if (!StringUtil.checkNull(map.getString("TYPEID")).equals("")) {
            A_TYPE_SQL = " AND a.ev_type_id='" + map.get("TYPEID") + "' ";
        }else{
            A_TYPE_SQL = " AND ( a.ev_type_id='EVTYPE001' or a.ev_type_id='EVTYPE004' )";
        }
        
        if (!StringUtil.checkNull(map.getString("PROCESSID")).equals("")) {
            B_PROCESS_SQL = " AND b.ev_process_id='" + map.get("PROCESSID")+ "' ";
            
        }
        StringBuffer sql=new StringBuffer();
        
        sql.append("SELECT   a.*, b.ev_marks_value, b.ev_marks_name, b.ev_process_id, ");
        sql.append("	    	c.code_name ev_process_name, b.ev_operate_id, ");
        sql.append("		d.code_name ev_operate_name, b.ev_marks_default ");
        sql.append("	FROM evs_type_item_v a, evs_relation b, sy_code c, sy_code d ");
        sql.append("	WHERE b.ev_item_id = a.ev_item_id ");
        sql.append("	AND b.ev_period_id = a.ev_period_id ");
        sql.append("	AND b.ev_type_id = a.ev_type_id ");
        sql.append("	AND b.ev_process_id = c.code_id(+) ");
        sql.append("	AND b.ev_operate_id = d.code_id(+) ");
        sql.append(A_PERIOD_SQL);
        sql.append(A_TYPE_SQL);
        sql.append(B_PROCESS_SQL);
        sql.append("	AND b.EV_OPERATE_ID in ('EVOPERATE003','EVOPERATE005','EVOPERATE009') ");
        sql.append(" ORDER BY a.ev_item_order ");

        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
		con = services.getConnection();
		pstmt = con.prepareStatement(sql.toString());
		Logger.getLogger(this.getClass()).debug(sql.toString());
		rs = pstmt.executeQuery();
		while (rs.next()) {
                     EvsItem evsItem=new EvsItem();
                     evsItem.setEvItemID(rs.getString("ev_item_id"));
                     evsItem.setEvItemName(rs.getString("ev_item_name"));
                     evsItem.setEvPeriodID(rs.getString("ev_period_id"));
                     evsItem.setEvTypeID(rs.getString("ev_type_id"));
                     evsItem.setEvTypeName(rs.getString("ev_type_name"));
                     
                     List<EvsMark> lMark=null;
                     String sMarkValue=StringUtil.checkNull(rs.getString("ev_marks_value"));
                     String sMarkName=StringUtil.checkNull(rs.getString("ev_marks_name"));
                     String defaultMark=StringUtil.checkNull(rs.getString("ev_marks_default"));
                     String [] aMarkValue=sMarkValue.split(",");
                     String [] aMarkName=sMarkName.split(",");
                     
                     EvsItemProcessMark evsItemProcessMark=new EvsItemProcessMark();
                     if(null!=aMarkValue&&null!=aMarkName){
                	 lMark=new ArrayList<EvsMark>();
                	 for(int i=0,j=aMarkValue.length;i<j;i++){
                	     EvsMark mark=new EvsMark();
                	     mark.setValue(StringUtil.checkNull(aMarkValue[i]));
                	     try{
                		 mark.setName(StringUtil.checkNull(aMarkName[i]));
                	     }catch(Exception e){
                		 mark.setName(StringUtil.checkNull(aMarkName[i],"无"));
                	     }
                      	     mark.setDefaultValue(StringUtil.checkNull(aMarkValue[i]).equals(defaultMark)); 
                      	     
                      	     mark.setEmpCnt(evsItemProcessMark.getEvEmpItemProcessMarkCnt(map, StringUtil.checkNull(rs.getString("ev_item_id")), StringUtil.checkNull(aMarkValue[i])));
                	     Logger.getLogger(this.getClass()).debug(mark.getEmpCnt());
                      	     lMark.add(mark);
                	 }
                     }
                     evsItem.setLItemProcessMarks(lMark);
                     lEvsItem.add(evsItem);
		}
	} catch (SQLException sqle) {
		sqle.printStackTrace();
		throw new DataAccessException(
				"cant execute query for getItems statistics",
				sqle);
	}catch (ServiceLocatorException sqle) {
		sqle.printStackTrace();
		throw new DataAccessException(
				"cant execute query for getItems statistics",
				sqle);
	} finally {
		SqlUtil.close(rs, pstmt, con);
	}
	    return lEvsItem;
    }
    private String evPeriodID;

    private String evTypeID;
    
    private String evTypeName;
    
    private String evItemID;

    private String evItemName;

    private int evItemOrder;
    
    private List lItemColumns;
    
    private List<EvsMark> lItemProcessMarks;

    public List<EvsMark> getLItemProcessMarks() {
        return lItemProcessMarks;
    }

    public void setLItemProcessMarks(List<EvsMark> itemProcessMarks) {
        lItemProcessMarks = itemProcessMarks;
    }

    
    
}