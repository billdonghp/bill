/* Generated by Together */

package com.ait.evs;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Hashtable;
import java.util.Vector;

import com.ait.util.DataAccessException;
import com.ait.util.ServiceLocator;
import com.ait.util.ServiceLocatorException;
import com.ait.util.SqlUtil;

public class EvsItemDetail {
	private static ServiceLocator services;

	public EvsItemDetail() {
		try {
			services = ServiceLocator.getInstance();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getPeriodID() {
		return periodID;
	}

	public void setPeriodID(String periodID) {
		this.periodID = periodID;
	}

	public String getEvEmpID() {
		return evEmpID;
	}

	public void setEvEmpID(String evEmpID) {
		this.evEmpID = evEmpID;
	}

	public String getEvEmpName() {
		return evEmpName;
	}

	public void setEvEmpName(String evEmpName) {
		this.evEmpName = evEmpName;
	}

	public String getEvItemID() {
		return evItemID;
	}

	public void setEvItemID(String evItemID) {
		this.evItemID = evItemID;
	}

	public String getEvItemName() {
		return evItemName;
	}

	public void setEvItemName(String evItemName) {
		this.evItemName = evItemName;
	}

	public float getEvDetailProp() {
		return evDetailProp;
	}

	public void setEvDetailProp(float evDetailProp) {
		this.evDetailProp = evDetailProp;
	}

	public Vector getItemIDByEmp(String periodID, String empID)
			throws DataAccessException {
		String sql = "select * from EVS_EMP_ITEM_V where EV_PERIOD_ID = ?"
				+ " and EV_EMP_ID = ? order by EV_ITEM_ORDER";
		Vector v = new Vector();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		try {
			con = services.getConnection();
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, periodID);
			pstmt.setString(2, empID);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Hashtable h = new Hashtable();
				h.put("ItemID", rs.getString("EV_ITEM_ID"));
				h.put("ItemName", rs.getString("EV_ITEM_NAME"));
				v.add(h);
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getItemIDByEmp statistics", sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getItemIDByEmp statistics", sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);

		}
		return v;
	}

	public int deleteItemDetial(int detailSeq) {
		String sql = "{ call EVS_DETAIL_DEL_P(?,?) }";
		int count = 0;
		Connection con = null;
		CallableStatement cs = null;
		try {
			con = services.getConnection();
			cs = con.prepareCall(sql);
			cs.setInt(1, detailSeq);
			cs.registerOutParameter(2, Types.INTEGER);
			cs.execute();
			count = cs.getInt(2);
			return count;
		} catch (Exception sqe) {
			System.out
					.println("EvsItemDetail.java:deleteItemDetial:refresh: sqe="
							+ sqe);
			return 0;
		} finally {
			try {
				cs.close();
				con.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}

	public int deleteYearItemDetial(int detailSeq) {
		String sql = "{ call EVS_DETAIL_DEL_YEAR_P(?,?) }";
		int count = 0;
		Connection con = null;
		CallableStatement cs = null;
		try {
			con = services.getConnection();
			cs = con.prepareCall(sql);
			cs.setInt(1, detailSeq);
			cs.registerOutParameter(2, Types.INTEGER);
			cs.execute();
			count = cs.getInt(2);
			return count;
		} catch (Exception sqe) {
			System.out
					.println("EvsItemDetail.java:deleteYearItemDetial:refresh: sqe="
							+ sqe);
			return 0;
		} finally {
			try {
				cs.close();
				con.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}

	public void modiyProp(int seqDetail, float prop) {
		String sql = "update EVS_ITEM_DETAIL set EV_DETAIL_PROP = ? where SEQ_EV_ITEM_DETAIL = ?";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = services.getConnection();
			pstmt = con.prepareStatement(sql);
			pstmt.setFloat(1, prop);
			pstmt.setInt(2, seqDetail);
			pstmt.executeUpdate();
		} catch (Exception sqe) {
			System.out.println("EvsItemDetail.java:modiyProp:refresh: sqe="
					+ sqe);

		} finally {
			try {
				pstmt.close();
				con.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}

	public int createItemDetial(int order) {
		String checkSeq = "select evs_item_detail_seq.nextval FROM dual ";
		String sql = "insert into EVS_ITEM_DETAIL (SEQ_EV_ITEM_DETAIL,EV_PERIOD_ID"
				+ ",EV_EMP_ID,EV_ITEM_ID,EV_DETAIL_PROP,EV_DETAIL_ORDER) values (?,?,?,?,?,?)";
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		int seq = 0;
		try {
			con = services.getConnection();
			pstmt = con.prepareStatement(checkSeq);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				seq = rs.getInt(1);
			} else {
				seq = 1;
			}
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, seq);
			pstmt.setString(2, this.periodID);
			pstmt.setString(3, this.evEmpID);
			pstmt.setString(4, this.evItemID);
			pstmt.setFloat(5, this.evDetailProp);
			if (order == 0)
				pstmt.setInt(6, seq);
			else
				pstmt.setInt(6, order);
			pstmt.executeUpdate();

			return seq;
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
	}

	private String periodID;

	private String evEmpID;

	private String evEmpName;

	private float evDetailProp;

	private String evItemID;

	private String evItemName;
}