<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="gm.gmview">
	<!-- retrieve overtime plan list -->
	<select id="gmViewList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
		 select T.GM_ID,
         T.GM_TYPE,
         T.GM_FROM_DATE,
         T.GM_TO_DATE      
		 from gm_eatery t
		 WHERE T.CPNY_ID=#cpnyId:VARCHAR#
		 order by t.gm_from_date
		]]>
	</select>
	

	<select id="eatLookList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			  select t.card_no,
				       to_char(t.r_time,'YYYY-MM-DD HH24:MI') RTIME,
				       hr.person_id,
				       hr.empid,
				       hr.chinesename,
				       de.deptname,
				       type.type_name,
				       code.code_name,
				       (select shift.shift_name
				          from ar_shift010 shift
				         where shift.shift_no = ar_get_shiftno(t.empid,
				                                               to_char(t.r_time, 'YYYY/MM/DD'),
				                                               #cpnyId:VARCHAR#)) shiftname,
				       get_eatery_type(to_char(t.r_time, 'YYYY-MM-DD HH24:MI'),
				                       #cpnyId:VARCHAR#,
				                       'name') eaterytype
				  from ar_eatery_records  t,
				       hr_employee        hr,
				       hr_department      de,
				       gm_eatery_cardtype type,
				       sy_code            code
				 where t.empid = hr.person_id(+)
				   and hr.deptid = de.deptid(+)
				   and t.card_type = type.type_no
				   and hr.join_type_code = code.code_id(+)				  
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND EXISTS ( SELECT SAD.ADMIN_DEPTID
									   FROM SY_ADMIN_DEPTID SAD, SY_ADMIN SA
									  WHERE SAD.ADMIN_NO = SA.ADMINNO
									    AND (SA.ADMINID = #ADMINID:VARCHAR#
				                        OR hr.person_id=#ADMINID:VARCHAR#)
									    AND SAD.ADMIN_DEPTID = hr.DEPTID	
								   ) 

		]]>
			<isNotEmpty prepend="AND" property="DEPTID">
				<![CDATA[
			 		DE.DEPTID = #DEPTID:VARCHAR#
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="empID">
				<![CDATA[
					HR.EMPID like '%' || #empID:VARCHAR# || '%'
				]]>
			</isNotEmpty>
			
			<isNotEmpty prepend="AND" property="empName">
				<![CDATA[
					( HR.CHINESENAME like '%' || #empName:VARCHAR# || '%' OR  HR.EMPID like '%' || #empName:VARCHAR# || '%')
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="GM_TYPE">
				<![CDATA[
				get_eatery_type(to_char(t.r_time, 'YYYY-MM-DD HH24:MI'), #cpnyId:VARCHAR#,'id') = #GM_TYPE:VARCHAR#					
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="CARD_TYPE">
				<![CDATA[
					t.card_type = #CARD_TYPE:VARCHAR#
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="STARTTIME">
				<![CDATA[
					t.R_TIME >=TO_DATE(#STARTTIME:VARCHAR#,'YYYY-MM-DD HH24:MI')
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="ENDTIME">
				<![CDATA[
					t.R_TIME <=TO_DATE(#ENDTIME:VARCHAR#,'YYYY-MM-DD HH24:MI')
				]]>
			</isNotEmpty>
		<![CDATA[
				order by T.R_TIME desc
			]]>
	</select>

	<select id="eatLookCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
				select COUNT(*)
					  from ar_eatery_records  t,
					       hr_employee        hr,
					       hr_department      de
			   where t.empid = hr.person_id(+)
                     and hr.deptid = de.deptid(+) 
                     and t.cpny_id =  #cpnyId:VARCHAR#
		]]>

		   <isNotEmpty prepend="AND" property="DEPTID">
				<![CDATA[
			 		DE.DEPTID = #DEPTID:VARCHAR#
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="empID">
				<![CDATA[
					HR.EMPID like '%' || #empID:VARCHAR# || '%'
				]]>
			</isNotEmpty>
			
			<isNotEmpty prepend="AND" property="empName">
				<![CDATA[
					( HR.CHINESENAME like '%' || #empName:VARCHAR# || '%' OR  HR.EMPID like '%' || #empName:VARCHAR# || '%')
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="GM_TYPE">
				<![CDATA[
				get_eatery_type(to_char(t.r_time, 'YYYY-MM-DD HH24:MI'), #cpnyId:VARCHAR#,'id') = #GM_TYPE:VARCHAR#					
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="CARD_TYPE">
				<![CDATA[
					t.card_type = #CARD_TYPE:VARCHAR#
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="STARTTIME">
				<![CDATA[
					t.R_TIME >=TO_DATE(#STARTTIME:VARCHAR#,'YYYY-MM-DD HH24:MI')
				]]>
			</isNotEmpty>
	
			<isNotEmpty prepend="AND" property="ENDTIME">
				<![CDATA[
					t.R_TIME <=TO_DATE(#ENDTIME:VARCHAR#,'YYYY-MM-DD HH24:MI')
				]]>
			</isNotEmpty>
	</select>

	<select id="gmUpdate" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
		select t.gm_id,t.gm_type,t.gm_from_date,t.gm_to_date from gm_eatery t WHERE T.GM_ID = #gm_id#
		]]>
	</select>

	<!-- retrieve overtime plan list count -->
	<select id="gmViewCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			SELECT COUNT(*) FROM GM_EATERY WHERE CPNY_ID=#cpnyId:VARCHAR#
		]]>
	</select>

	<select id="validateGM" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
		
		 select count(*) from (SELECT *
		  FROM GM_EATERY T
		 WHERE T.GM_FROM_DATE >= #listHH#
		   and T.GM_TO_DATE <= #listHHEND#
		   and t.cpny_id=#cpnyId:VARCHAR#) temp
			  
		]]>
	</select>

	<update id="updatesaveGM" parameterClass="SimpleMap">
		<![CDATA[
			 update gm_eatery t 
	 		set 
   			t.gm_type=#typeName:VARCHAR#,
   			t.gm_from_date=#listHH:VARCHAR#,
   			t.gm_to_date=#listHHEND:VARCHAR#,
   			t.update_date=SYSDATE,
	 		t.updated_by=#AdminID:VARCHAR#
            WHERE T.GM_ID = #gmid:NUMERIC#
		]]>
	</update>

	<insert id="insertGm" parameterClass="SimpleMap">
		<![CDATA[
			insert into GM_EATERY (GM_ID,GM_TYPE,GM_FROM_DATE,GM_TO_DATE,CREATE_DATE,CREATED_BY,CPNY_ID) 
			values(GM_EATERY_SEQ.NEXTVAL,#typeName:VARCHAR#,#listHH:VARCHAR#,#listHHEND:VARCHAR#,SYSDATE,#AdminID:VARCHAR#,#cpnyId:VARCHAR#)
		]]>
	</insert>

	<delete id="deleteGM" parameterClass="SimpleMap">
		<![CDATA[
			delete from GM_EATERY where GM_ID = #gm_id#
		]]>
	</delete>

	<delete id="deleteGm1" parameterClass="SimpleMap">
		<![CDATA[
			DELETE FROM gm_shift_eatery t WHERE T.GM_TYPE_NO= #gm_id#
		]]>
	</delete>

	<select id="gmType" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			SELECT G.GM_ID,G.GM_TYPE,G.GM_FROM_DATE,G.GM_TO_DATE FROM GM_EATERY G
			WHERE G.CPNY_ID=#cpnyId:VARCHAR#
		]]>
	</select>

	<select id="gmTypeUpdate" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			SELECT G.GM_ID,G.GM_TYPE,G.GM_FROM_DATE,G.GM_TO_DATE FROM GM_EATERY G where G.GM_ID=#GM_ID#
		]]>
	</select>

	<select id="timeGmType" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select distinct G.START_TIME,G.End_Time 
			from gm_shift_eatery G
			where #GM_ID:NUMERIC#=g.gm_type_no
		]]>
	</select>

	<select id="timeGmTypeCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			select count(*) from gm_shift_eatery , GM_EATERY G where G.GM_ID=#GM_ID#
		]]>
	</select>

	<select id="cardType" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select t.type_no,t.type_name from gm_eatery_cardtype t
			WHERE T.CPNY_ID=#cpnyId:VARCHAR#
		]]>
	</select>

	<select id="shift" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select a.shift_no,a.shift_name from ar_shift010 a where a.shift_no <> 65
			
		]]>
	</select>

	<select id="shiftlook" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select a.shift_no,a.shift_name 
			from ar_shift010 a , gm_shift_eatery t
			where #GM_ID:NUMERIC#=t.gm_type_no and a.shift_no=t.shift_no
		]]>
	</select>

	<select id="gmTypeEatery" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select G.GM_TYPE, A.SHIFT_NAME
  			FROM gm_eatery G, ar_shift010 A, gm_shift_eatery GANDA
 			WHERE G.GM_ID = GANDA.Gm_Type_No
 			AND A.SHIFT_NO = GANDA.SHIFT_NO
		]]>
	</select>


	<insert id="ShiftAndGmtypeAddCheckNo" parameterClass="SimpleMap">
		<![CDATA[
			insert into gm_shift_eatery (GM_TYPE_NO,SHIFT_NO,shift_eatery_no,create_date,created_by,START_TIME,END_TIME) 
			values(#gm_id:NUMERIC#,#SHIFT_NO:NUMERIC#,GM_SHIFT_EATERY_SEQ.NEXTVAL,SYSDATE,#AdminID:VARCHAR#,#STARTTIME:VARCHAR#,#ENDTIME:VARCHAR#)
		]]>
	</insert>

	<insert id="ShiftAndGmtypeAddCheckYes" parameterClass="SimpleMap">
		<![CDATA[
			insert into gm_shift_eatery (GM_TYPE_NO,SHIFT_NO,shift_eatery_no,create_date,created_by) 
			values(#gm_id:NUMERIC#,#SHIFT_NO:NUMERIC#,GM_SHIFT_EATERY_SEQ.NEXTVAL,SYSDATE,#AdminID:VARCHAR#)
		]]>
	</insert>

	<insert id="ShiftAndGmtypeUpdateNoCheckShift"
		parameterClass="SimpleMap">
		<![CDATA[
			insert into gm_shift_eatery (GM_TYPE_NO,shift_eatery_no,update_date, updated_by,START_TIME,END_TIME) 
			values(#gm_id:NUMERIC#,GM_SHIFT_EATERY_SEQ.NEXTVAL,SYSDATE,#AdminID:VARCHAR#,#STARTTIME:VARCHAR#,#ENDTIME:VARCHAR#)
		]]>
	</insert>

	<delete id="deleteTypenandshiftDelete" parameterClass="SimpleMap">
		<![CDATA[
			delete from gm_shift_eatery where gm_type_no=#gm_id#
		]]>
	</delete>
                
	<update id="gmUpdateCardApplicationEndDate"
		parameterClass="SimpleMap">
		<![CDATA[
			  UPDATE ga_card_application gca
     			SET gca.card_endoridate = gca.card_enddate,
      			   gca.card_enddate = #ENDDATE:VARCHAR#,
      			   gca.eatery_card_status = #cardStatus:VARCHAR#,
      			   gca.card_no = #cardNo:VARCHAR#,
      			   gca.card_no_id = #cardNoId:VARCHAR#,
      			   gca.card_status_update_by = #supervisor:VARCHAR#,
      			   gca.card_status_update_date = sysdate
   				WHERE gca.card_id = #GM_ID#
		]]>
	</update>

	<select id="GmType" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select t.gm_id,t.gm_type from gm_eatery t 
			where t.cpny_id=#cpnyId:VARCHAR#
			ORDER BY t.ORDER_NO
		]]>
	</select>
	

	<insert id="addExceptionInformation" parameterClass="SimpleMap">
		<![CDATA[
			
			  insert into gm_eatery_exception(
			  GM_EXCEPTION_ID,
			  GM_EXCEPTION_DATE ,
			  GM_EXCEPTION_EATERY ,
			  GM_EXCEPTION_REMARK ,
			  GM_EXCEPTION_CREATEDATE,
			  GM_EXCEPTION_CREATEBY,
			  CPNY_ID           
			  )
			  values(
			     GM_EATERY_EXCEPTION_SEQ.NEXTVAL,
			     #listDD:VARCHAR#,
			     #gmtype:VARCHAR#,
			     #Remarks:VARCHAR#,
			     SYSDATE,
			     #adminId:VARCHAR#,
			     #cpnyId:VARCHAR#
			     )
		
		]]>
	</insert>

	<select id="LookEateryExceptionCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			select count(*) from gm_eatery_exception t
			where t.cpny_id=#cpnyId:VARCHAR#
		]]>		
			<isNotEmpty prepend="AND" property="listDDS">
				<![CDATA[
					t.gm_exception_date>=#listDDS:VARCHAR#
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="listDDE">
				<![CDATA[
					t.gm_exception_date<=#listDDE:VARCHAR#
				]]>
			</isNotEmpty>
		
	</select>

	<select id="LookEateryExceptionList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select t.gm_exception_id,
		       t.gm_exception_date,
		       gm_type gm_exception_eatery,
		       t.gm_exception_remark,
		       to_char(t.gm_exception_createdate,'yyyy-MM-dd hh24:mi') AS GM_EXCEPTION_CREATEDATE,
		       h.chinesename
			  from gm_eatery_exception t , hr_employee h ,gm_eatery gm
		      where t.gm_exception_createby=h.person_id(+)
		      and t.gm_exception_eatery=gm.gm_id(+)
		      and  t.cpny_id=#cpnyId:VARCHAR#
		]]>
			<isNotEmpty prepend="AND" property="listDDS">
				<![CDATA[
					t.gm_exception_date>=#listDDS:VARCHAR#
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="listDDE">
				<![CDATA[
					t.gm_exception_date<=#listDDE:VARCHAR#
				]]>
			</isNotEmpty>
			<![CDATA[
				order by t.gm_exception_date desc
			]]>
	</select>
	
	<select id="adminDept" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select * from sy_admin_deptid,HR_DEPARTMENT WHERE sy_admin_deptid.ADMIN_DEPTID = HR_DEPARTMENT.DEPTID
		]]>
			<isNotEmpty prepend="AND" property="adminNo">
				<![CDATA[
					admin_no = #adminNo:NUMERIC#
				]]>
			</isNotEmpty>
	</select>

	<delete id="deleteEateryException" parameterClass="SimpleMap">
		<![CDATA[
			delete from gm_eatery_exception t where t.gm_exception_id=#exceptionId#
		]]>
	</delete>

	<select id="empName" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select a.empid,
			       a.chinesename,
			       b.empid,
			       case
			         when a.empid = b.empid then
			          'checked'
			       end as "CHECKED"
			  from (select empid, chinesename,deptid
			          from hr_employee
			         where deptid in (select admin_deptid
			                            from sy_admin_deptid
			                           where admin_no = #adminNo:NUMERIC#
			                             and date_left is null)) A,
			       (select empid
			          from hr_employee
			         where deptid in (select admin_deptid
			                            from sy_admin_deptid
			                           where admin_no = #adminNo:NUMERIC#)
			           and empid in
			               (select empid
			                  from ar_schedule
			                 where shift_no in (select shift_no
			                                      from gm_shift_eatery
			                                     where gm_type_no = #GmTypeid:NUMERIC#)
			                union
			                select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode')
			                   and to_char(to_time, 'hh24:mi') >=
			                       (select distinct start_time
			                          from gm_shift_eatery
			                         where gm_type_no = #GmTypeid:NUMERIC# and start_time is not null)
			                   and to_char(to_time, 'hh24:mi') <=
			                       (select distinct end_time
			                          from gm_shift_eatery
			                         where gm_type_no = #GmTypeid:NUMERIC# and end_time is not null)
			                   and TO_CHAR(FROM_TIME,'YYYY-MM-DD')<= #current_date# AND TO_CHAR(TO_TIME,'YYYY-MM-DD')>= #current_date#)) B
			 where a.empid = b.empid(+)
			
		]]>
		<![CDATA[
		order by a.chinesename
		]]>
	</select>
	
	<select id="getSoonApplyId" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			select t.eat_apply_id from gm_eat_apply t where rownum = 1 order by t.eat_apply_id desc
		]]>
	</select>
	
	<select id="getSeq" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			select gm_eat_apply_seq.nextval from dual
		]]>
	</select>
	
	
	<select id="empNameCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			select count(*)
			  from hr_employee     HR,
			       HR_DEPARTMENT   HD
			 where HR.DEPTID = HD.DEPTID
			    AND HR.ACTIVITY = 1
			    AND HR.STATUS_CODE <> 'EmpStatus3'
			    and EXISTS (
			    SELECT * FROM SY_ADMIN_DEPTID SD
			         WHERE HR.DEPTID = SD.ADMIN_DEPTID
			           AND SD.ADMIN_NO =
			               (SELECT ADMINNO FROM SY_ADMIN WHERE ADMINID = #AdminId:VARCHAR#)
			            OR HR.EMPID = #AdminId:VARCHAR#)
		]]>
	</select>
	
	<select id="ifApplyFlag" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			 select count(*) from gm_eat_apply
		]]>
		<dynamic prepend="WHERE">
		<isNotEmpty prepend="AND" property="current_date">
			<![CDATA[
				to_char(eat_apply_date,'yyyy-mm-dd')=#current_date#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="deptId">
			<![CDATA[
				EAT_APPLY_DEPT = #deptId#
			]]>
		</isNotEmpty>
		</dynamic>
	</select>

	<insert id="insertEatApply" parameterClass="SimpleMap">
		<![CDATA[
		insert into gm_eat_apply t
		  (t.eat_apply_id,
		   t.eat_apply_eatery,
		   t.eat_apply_dept,
		   t.eat_apply_date,
		   t.eat_apply_no,
		   t.eat_apply_people,
		   t.eat_date,
		   t.eat_flag,
		   t.forecast_num)
		values
		  (#seq:NUMERIC#,#GmTypeid:NUMERIC#,#deptid:VARCHAR#,sysdate,#applyno:VARCHAR#,#num:NUMERIC#,to_date(#eatdate:NUMERIC#,'YYYY-MM-DD'),0,#Forecast_num:NUMERIC#)
		]]>
	</insert>
	
	<insert id="insertEatApplyEmp" parameterClass="SimpleMap">
		<![CDATA[
			INSERT INTO GM_EAT_APPLY_EMP 
			VALUES(GM_EAT_APPLY_EMP_SEQ.NEXTVAL , #eatapplyid:NUMERIC# , #empnames:VARCHAR# , #gmids:VARCHAR#)
		]]>
	</insert>
	

	<select id="peopleNum" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select DISTINCT t.eat_apply_people , ge.gm_type ,t.eat_apply_no , hd.deptname , t.eat_flag , t.eat_apply_no
			  from gm_eat_apply t , gm_eatery ge , hr_department hd
			 where ge.gm_id=t.eat_apply_eatery(+)
			  and hd.deptid=t.eat_apply_dept
		]]>
			<isNotEmpty prepend="AND" property="StartTime">
				<![CDATA[
					t.eat_apply_date>TO_DATE(#StartTime:VARCHAR#,'YYYY-MM-DD HH24:MI:SS')
				]]>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="EndTime">
				<![CDATA[
					t.eat_apply_date<TO_DATE(#EndTime:VARCHAR#,'YYYY-MM-DD HH24:MI:SS')
				]]>
			</isNotEmpty>
	</select>
	
	<select id="eateryNumCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			select count(*)
			          from hr_employee
			         where deptid in (select admin_deptid
			                            from sy_admin_deptid
			                           where admin_no = #adminNo:NUMERIC#)
			           and empid in
			               (select empid
			                  from ar_schedule
			                 where shift_no in (select shift_no
			                                      from gm_shift_eatery
			                                     where gm_type_no = #GmTypeid:NUMERIC#)
			                union
			                select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode')
			                   and to_char(to_time, 'hh24:mi') >=
			                       (select distinct start_time
			                          from gm_shift_eatery
			                         where gm_type_no = #GmTypeid:NUMERIC# and start_time is not null)
			                   and to_char(to_time, 'hh24:mi') <=
			                       (select distinct end_time
			                          from gm_shift_eatery
			                         where gm_type_no = #GmTypeid:NUMERIC# and end_time is not null)
			                   and TO_CHAR(FROM_TIME,'YYYY-MM-DD')<= #current_date# AND TO_CHAR(TO_TIME,'YYYY-MM-DD')>= #current_date#)
			                         
		]]>
	</select>
	
	
	<select id="gmFromToDate" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select t.gm_from_date , t.gm_to_date from gm_eatery t where t.gm_id=#GmTypeid:NUMERIC#
		]]>
	</select>
	
	<select id="gmEatApplyDate" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select t.eat_apply_date from gm_eat_apply t where t.eat_apply_eatery=#gmtypeID:NUMERIC#
		]]>
	</select>
	
	<select id="eatDate" parameterClass="SimpleMap" resultClass="string">
		<![CDATA[
			select TO_CHAR(t.eat_date,'YYYY-MM-DD') from gm_eat_apply t where t.eat_apply_eatery=#GmTypeid:NUMERIC#
		]]>
	</select>
	
	<update id="updatesaveStatistic" parameterClass="SimpleMap">
		<![CDATA[
			  update gm_eat_apply t set t.eat_apply_people=#PeopleNum:NUMERIC# where t.eat_apply_date=#applyNo:VARCHAR#
		]]>
	</update>
	
	<update id="addEatStatistic" parameterClass="SimpleMap" >
		<![CDATA[
							  merge into gm_eatery_confirm t1
				using (select NVL((select max(t.eat_count_id)
				                    from gm_eatery_confirm t
				                   where EXISTS
				                   (SELECT *
				                            FROM gm_eatery_confirm gm
				                           WHERE gm.countm_type = '$type$'
				                             and t.eat_count_id = eat_count_id
				                             and gm.count_dept = '$deptid$'
				                             and gm.count_date = to_date('$current_date$', 'YYYY-MM-DD')
				                             AND gm.CPNY_ID = '$cpnyId$')),
				                  (select count(*)
				                     from gm_eatery_confirm t
				                    where not EXISTS
				                    (SELECT *
				                             FROM gm_eatery_confirm gm
				                            WHERE gm.countm_type = '$type$'
				                              and t.eat_count_id = eat_count_id
				                              and gm.count_dept ='$deptid$'
				                              and gm.count_date = to_date('$current_date$', 'YYYY-MM-DD')
				                              AND gm.CPNY_ID ='$cpnyId$'))) eatcount
				         from dual) t2
				ON (T1.EAT_COUNT_ID = T2.eatcount)
				WHEN MATCHED THEN
				  UPDATE SET t1.count_num =$countnum$
				WHEN NOT MATCHED THEN
				  INSERT
				    (t1.eat_count_id,
				     t1.countm_type,
				     t1.count_fourdept,
				     t1.count_dept,
				     t1.count_date,
				     t1.count_num,
				     t1.cpny_id,
				     t1.flag,
				     t1.createrby)
				  VALUES
				    (gm_eatery_confirm_seq.nextval,
				      '$type$',
				     hr_get_level_deptid('$deptid$', 4),
				     '$deptid$',
				     to_date('$current_date$', 'YYYY-MM-DD'),
				     $countnum$,
				     '$cpnyId$',
				     '0',
				     '$adminId$')

		]]>
	</update>
	<update id="deleteStatistic" parameterClass="SimpleMap" >	
		<![CDATA[
		
				DELETE  FROM gm_eatery_confirm T			
				WHERE to_char(t.count_date, 'YYYY-MM-DD') = #current_date:VARCHAR#
				 AND T.FLAG=0
				 AND    EXISTS
                         (SELECT SAD.ADMIN_DEPTID
                                  FROM SY_ADMIN_DEPTID SAD, SY_ADMIN SA
                                 WHERE SAD.ADMIN_NO = SA.ADMINNO
                                   AND SA.ADMINID =  #adminId:VARCHAR#
                                   AND SAD.ADMIN_DEPTID = T.COUNT_DEPT)                             
		]]>
	</update>
	
	<update id="insertStatistic" parameterClass="SimpleMap" >
		<![CDATA[
				  INSERT INTO gm_eatery_confirm t1
				    (t1.eat_count_id,
				     t1.countm_type,
				     t1.count_fourdept,
				     t1.count_dept,
				     t1.count_date,
				     t1.count_num,
				     t1.cpny_id,
				     t1.flag,
				     t1.createrby,
				     t1.remark)
				  VALUES
				    (gm_eatery_confirm_seq.nextval,
				      #type:VARCHAR#,
				     hr_get_level_deptid(#deptid:VARCHAR#, 4),
				     #deptid:VARCHAR#,
				     to_date(#current_date:VARCHAR#, 'YYYY-MM-DD'),
				     #countnum:NUMERIC#,
				     #cpnyId:VARCHAR#,
				     '0',
				     #adminId:VARCHAR#,
				     #remark:VARCHAR#)

		]]>
	</update>
	<update id="deleteStatisticKO" parameterClass="SimpleMap" >	
		<![CDATA[
		
				DELETE  FROM gm_eatery_ko_confirm T			
				WHERE to_char(t.count_date, 'YYYY-MM-DD') = #current_date:VARCHAR#
				 AND T.FLAG=0
				 AND    EXISTS
                         (SELECT SAD.ADMIN_DEPTID
                                  FROM SY_ADMIN_DEPTID SAD, SY_ADMIN SA
                                 WHERE SAD.ADMIN_NO = SA.ADMINNO
                                   AND SA.ADMINID =  #adminId:VARCHAR#
                                   AND SAD.ADMIN_DEPTID = T.COUNT_DEPT)                             
		]]>
	</update>
	
	<update id="insertStatisticKO" parameterClass="SimpleMap" >
		<![CDATA[
				  INSERT INTO gm_eatery_ko_confirm t1
				    (t1.eat_count_id,
				     t1.countm_type,
				     t1.count_fourdept,
				     t1.count_dept,
				     t1.count_date,
				     t1.count_num,
				     t1.cpny_id,
				     t1.flag,
				     t1.createrby,
				     t1.remark)
				  VALUES
				    (gm_eatery_ko_confirm_seq.nextval,
				      #type:VARCHAR#,
				     hr_get_level_deptid(#deptid:VARCHAR#, 4),
				     #deptid:VARCHAR#,
				     to_date(#current_date:VARCHAR#, 'YYYY-MM-DD'),
				     #countnum:NUMERIC#,
				     #cpnyId:VARCHAR#,
				     '0',
				     #adminId:VARCHAR#,
				     #remark:VARCHAR#)

		]]>
	</update>
	<select id="eateryPeople" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			select count(*) as PEOPLENUM
			  from (select e.deptid
			          from ar_eatery_records t, hr_employee e, gm_eatery g, gm_eatery_cardtype gec
			         where t.empid = e.empid
			           and to_char(t.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			           and g.gm_id = #gmid:NUMERIC#
			           and to_char(t.r_time,'yyyy-mm-dd')>=#startdate#
			           and to_char(t.r_time,'yyyy-mm-dd')<=#enddate#
			           and t.card_type = gec.type_no
			           and gec.type_no <> 2) aa
			 where aa.deptid IN (SELECT DEPTID
			                       FROM HR_DEPARTMENT
			                      START WITH DEPTID = #deptId:VARCHAR#
			                     CONNECT BY PRIOR DEPTID = PARENT_DEPT_ID)
		]]>
	</select>
	
	<select id="eateryPeopleNotProvisional" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			select count(*) as PEOPLENUM
			  from (select e.deptid
			          from ar_eatery_records t, hr_employee e, gm_eatery g, gm_eatery_cardtype gec
			         where t.empid = e.empid
			           and to_char(t.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			           and g.gm_id = #gmid:NUMERIC#
			           and to_char(t.r_time,'yyyy-mm-dd')>=#startdate#
			           and to_char(t.r_time,'yyyy-mm-dd')<=#enddate#
			           and t.card_type = gec.type_no
			           and gec.type_no = 2) aa
			 where aa.deptid IN (SELECT DEPTID
			                       FROM HR_DEPARTMENT
			                      START WITH DEPTID = #deptId:VARCHAR#
			                     CONNECT BY PRIOR DEPTID = PARENT_DEPT_ID)
		]]>
	</select>
	
	<select id="deptId" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select t.deptid,t.deptname 
			from hr_department t
			where t.dept_level=5
		]]>
	</select>
	
	<select id="gmid" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select gm_id,gm_type from gm_eatery
		]]>
	</select>
	
	<select id="selectSame" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			select count(*)
			  from gm_eat_apply_emp t
			 where t.eat_apply_id = #soonApplyId:VARCHAR#
			   and t.emp_id = #empnames:VARCHAR#
			   and t.eatery_type_id = #gmids:VARCHAR#
		]]>
	</select>
	
	
	<select id="getAllEmpDeptRtimeInfo" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select hd.deptname,he.empid,he.chinesename 
			  from ar_detail t , hr_employee he, hr_department hd 
			 WHERE TO_CHAR(T.TO_TIME,'YYYY-MM-DD') = #date:VARCHAR# 
			   and t.empid = he.empid
			   and he.deptid = hd.deptid
		]]>
	</select>
	
	<select id="getOtAllEmpDeptRtimeInfo" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select hd.deptname,he.empid,he.chinesename,to_char(t.from_time,'yyyy-mm-dd hh24:mi') as from_time,
					to_char(t.to_time,'yyyy-mm-dd hh24:mi') as to_time
			  from ar_detail t , hr_employee he, hr_department hd 
			 WHERE TO_CHAR(T.TO_TIME,'YYYY-MM-DD') = #date:VARCHAR# 
			   and t.empid = he.empid
			   and he.deptid = hd.deptid
			   and t.ar_item_no in (30, 31, 32,41,42)
		]]>
	</select>
	
	<select id="getNonNormalAllEmpRtimeInfo" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select TO_CHAR(ar.r_time,'YYYY-MM-DD HH24:MI:ss') artime,
                   TO_CHAR(eat.r_time,'YYYY-MM-DD HH24:MI:ss') eattime,
			       ar.empid,
			       hr.chinesename,
			       de.deptname,
			       hr_get_level_deptname(hr.deptid, '4') dept,
			       post.code_name
			  from ar_mac_records    ar,
			       ar_eatery_records eat,
			       hr_employee       hr,
			       hr_department     de,
			       sy_code  post
			 where ar.empid = eat.empid
			   and to_char(ar.r_time, 'YYYY-MM-DD') = to_char(eat.r_time, 'YYYY-MM-DD')
			   and to_char(ar.r_time, 'YYYY-MM-DD') = #date:VARCHAR#
			   and ar.r_time between
			       to_date(#date:VARCHAR#|| ' 17:00:00', 'YYYY-MM-DD HH24:MI:ss') and
			       to_date(#date:VARCHAR#|| ' 18:30:00', 'YYYY-MM-DD HH24:MI:ss')
			   and eat.r_time between
			       to_date(#date:VARCHAR#|| ' 17:00:00', 'YYYY-MM-DD HH24:MI:ss') and
			       to_date(#date:VARCHAR#|| ' 18:30:00', 'YYYY-MM-DD HH24:MI:ss')
			   and ar.empid = hr.person_id(+)
			   and ar.cpny_id=#cpnyId:VARCHAR#
			   and eat.cpny_id=#cpnyId:VARCHAR#
			   and hr.deptid = de.deptid(+)
			   and hr.post_code=post.code_id(+)
		]]>
	</select>
	
	<select id="getOtInfo" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select a.empid, to_char(a.r_time, 'hh24:mi') as r_time, ge.gm_type
			  from ar_eatery_records a, ar_detail ad, gm_eatery ge
			 where a.empid = ad.empid
			   and a.r_time between ad.from_time and ad.to_time
			   and to_char(a.r_time, 'hh24:mi') between ge.gm_from_date and
			       ge.gm_to_date
			   and a.empid = #empId:VARCHAR#
			   and ad.ar_item_no in (30, 31, 32,41,42)
			   and to_char(a.r_time, 'yyyy-MM-dd') = #date:VARCHAR#
		]]>
	</select>
	
	<select id="getOtNotEatInfo" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
           	 
           	 select he.empid
			  from hr_employee he,
			       (select a.empid
			          from ar_eatery_records a, ar_detail ad, gm_eatery ge
			         where a.empid = ad.empid
			           and a.r_time between ad.from_time and ad.to_time
			           and to_char(a.r_time, 'hh24:mi') between ge.gm_from_date and
			               ge.gm_to_date
			           and a.empid = #empId:VARCHAR#
			           and ad.ar_item_no in (30, 31, 32, 41, 42)
			           AND to_char(a.r_time, 'yyyy-MM-dd hh24:mi') = #date:VARCHAR#) t
			 where he.empid = t.empid(+)
			   and t.empid is null
           	 
		]]>
	</select>
	
	<select id="getNotEatApply" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			 SELECT EMP.DEPTNAME, EMP.EMPID,EMP.CHINESENAME,EATERY.GM_TYPE,EATERY.GM_TYPE2
			  FROM (SELECT HE.*, HD.DEPTNAME, HD.DEPT_LEVEL FROM HR_EMPLOYEE HE, HR_DEPARTMENT HD WHERE HE.DEPTID = HD.DEPTID AND HE.EMP_DIFF_CODE = 'C_12067_1330306') EMP,
			       (SELECT H.EMPID,MAX(GM_TYPE2) AS GM_TYPE2,
			               LTRIM(MAX (SYS_CONNECT_BY_PATH (GM_TYPE, '<br>')) KEEP (DENSE_RANK LAST ORDER BY CURR),'<br>') AS GM_TYPE
			          FROM  
			            (
			            select AE.EMPID,(AE.GM_TYPE || '-' || TO_CHAR(AE.R_TIME,'HH24:MI:SS')) AS GM_TYPE,EAT.GM_TYPE AS GM_TYPE2,
			                   AE.EMPID || '_' || TO_CHAR(ROW_NUMBER () OVER (PARTITION BY AE.EMPID ORDER BY AE.GM_ID)) AS CURR,
			                   AE.EMPID || '_' || TO_CHAR(ROW_NUMBER () OVER (PARTITION BY AE.EMPID ORDER BY AE.GM_ID) - 1) AS PREV
			              from
			                  (select ar_eatery_records.empid,ar_eatery_records.r_time,gm_eatery.gm_id,gm_eatery.gm_type
			                     from ar_eatery_records, gm_eatery
			                    where to_char(r_time,'yyyy-MM-dd') = #date:VARCHAR#
			                      and ar_eatery_records.card_type = 1
			                      and to_char(r_time,'hh24:mi') between gm_from_date and gm_to_date
			                   ) AE,
			                   (
			                    SELECT EAT_APPLY.EMPID,
			                           LTRIM(MAX (SYS_CONNECT_BY_PATH (GM_ID, ',')) KEEP (DENSE_RANK LAST ORDER BY CURR),',') AS GM_ID,
			                           LTRIM(MAX (SYS_CONNECT_BY_PATH (GM_TYPE, ',')) KEEP (DENSE_RANK LAST ORDER BY CURR),',') AS GM_TYPE
			                      FROM
			                         (   
			                          SELECT A.EAT_DATE,B.EMP_ID AS EMPID,C.GM_ID,C.GM_TYPE,
			                                 B.EMP_ID || '_' || TO_CHAR(ROW_NUMBER () OVER (PARTITION BY B.EMP_ID ORDER BY C.GM_ID)) AS CURR,
			                          			 B.EMP_ID || '_' || TO_CHAR(ROW_NUMBER () OVER (PARTITION BY B.EMP_ID ORDER BY C.GM_ID) - 1) AS PREV
			                            FROM GM_EAT_APPLY A , GM_EAT_APPLY_EMP B , GM_EATERY C
			                           WHERE A.EAT_APPLY_ID = B.EAT_APPLY_ID
			                             AND A.EAT_DATE = TO_DATE(#date:VARCHAR#, 'YYYY-MM-DD')
			                             AND A.EAT_APPLY_EATERY = C.GM_ID
			                         ) EAT_APPLY
			                           GROUP BY EAT_APPLY.EMPID
			                           START WITH CURR = EAT_APPLY.EMPID || '_' || 1 CONNECT BY PREV = PRIOR CURR
			                   ) EAT
			             where AE.empid = EAT.EMPID(+)
			               AND NVL(INSTR(EAT.GM_ID,AE.GM_ID),-1) <= 0
			            ) H
			            GROUP BY H.EMPID
			            START WITH CURR = H.EMPID || '_' || 1 CONNECT BY PREV = PRIOR CURR
			            ) EATERY
			   WHERE EMP.EMPID = EATERY.EMPID(+)
			   	 AND EMP.DEPT_LEVEL = 4
                 AND EATERY.GM_TYPE IS NOT NULL
			   ORDER BY EMP.EMPID
		]]>
	</select>
	
	<select id="specialEateryReport" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select notApply.EMPID,
				   he.chinesename,
			       h.deptname,
			       to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') as r_time,
			       ot.gm_type as otgm_type,
			       ot.gm_from_date as otgm_from_date,
			       otNotEat.gm_type as otNotEatgm_type,
			       otNotEat.gm_from_date as otNotEatgm_from_date,
			       notApply.gm_type as notApplygm_type,
			       notApply.gm_from_date as notApplygm_from_date
			  from (select A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			             
			           and A.empid in
			               (select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode'))) ot,
			       (seleCT A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			            
			           and A.empid NOT in (select emp_id from gm_eat_apply_emp)) notApply,
			       (select A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			              
			           and A.empid in
			               (select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode'))
			            
			           and A.empid not in (select empid from ar_eatery_records)) otNotEat,
			       hr_department h,
			       hr_employee he
			 where notApply.EMPID = ot.empid(+)
			   and notApply.empid = otNotEat.empid(+)
			   and he.empid = notApply.empid
			   and he.deptid = h.deptid
		]]>
		<isNotEmpty prepend="AND" property="startdate">
			<![CDATA[
				 to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') >= #startdate:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="enddate">
			<![CDATA[
				to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') <= #enddate:VARCHAR#
			]]>
		</isNotEmpty>
		<![CDATA[
			order by notApply.r_time desc
		]]>
	</select>
	
	<select id="getAllEmp" parameterClass="SimpleMap" resultClass="string">
		<![CDATA[
			select count(*)
			  from (select A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			             
			           and A.empid in
			               (select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode'))) ot,
			       (seleCT A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			            
			           and A.empid NOT in (select emp_id from gm_eat_apply_emp)) notApply,
			       (select A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			              
			           and A.empid in
			               (select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode'))
			            
			           and A.empid not in (select empid from ar_eatery_records)) otNotEat,
			       hr_department h,
			       hr_employee he
			 where notApply.EMPID = ot.empid(+)
			   and notApply.empid = otNotEat.empid(+)
			   and he.empid = notApply.empid
			   and he.deptid = h.deptid
		]]>
		<isNotEmpty prepend="AND" property="startdate">
			<![CDATA[
				 to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') >= #startdate:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="enddate">
			<![CDATA[
				to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') <= #enddate:VARCHAR#
			]]>
		</isNotEmpty>
	</select>
	
	<select id="getNotApply" parameterClass="SimpleMap" resultClass="string">
		<![CDATA[
			select count(notApply.empid)
			  from (select A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			             
			           and A.empid in
			               (select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode'))) ot,
			       (seleCT A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			            
			           and A.empid NOT in (select emp_id from gm_eat_apply_emp)) notApply,
			       (select A.EMPID, a.r_time, g.gm_type, g.gm_from_date
			          from ar_eatery_records a, gm_eatery g
			         where to_char(a.r_time, 'hh24:mi') between g.gm_from_date and
			               g.gm_to_date
			              
			           and A.empid in
			               (select empid
			                  from ar_apply_result
			                 where apply_type in
			                       (select code_id
			                          from sy_code
			                         where parent_code = 'OTTypeCode'))
			            
			           and A.empid not in (select empid from ar_eatery_records)) otNotEat,
			       hr_department h,
			       hr_employee he
			 where notApply.EMPID = ot.empid(+)
			   and notApply.empid = otNotEat.empid(+)
			   and he.empid = notApply.empid
			   and he.deptid = h.deptid
		]]>
		<isNotEmpty prepend="AND" property="startdate">
			<![CDATA[
				 to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') >= #startdate:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="enddate">
			<![CDATA[
				to_char(notApply.r_time, 'yyyy-MM-dd hh24:mi') <= #enddate:VARCHAR#
			]]>
		</isNotEmpty>
	</select>
	
	<select id="geteateryTypeNo" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select eat_apply_eatery from gm_eat_apply
		]]>
	</select>
	
	<select id="getEatApplyId" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select t.eat_apply_id from gm_eat_apply t where t.eat_apply_eatery = #eateryTypeNo:VARCHAR#
		]]>
	</select>
	
	<select id="getAllDept" resultClass="SimpleMap">
		<![CDATA[
			select * from hr_department t where t.dept_level = 4
		]]>
	</select>
	
	<select id="getAllEateryType" resultClass="SimpleMap">
		<![CDATA[
			select * from gm_eatery t order by t.order_no
		]]>
	</select>
	
	<select id="getResult" resultClass="SimpleMap"  remapResults="true">
		<![CDATA[
			   select t.deptname,
			   $sunsql$		
		       sum(allbreak) allbreak,
		       sum(alllunch) alllunch,
		       sum(allsupper) allsupper,
		       sum(alldinner) alldinner,
		       sum(allcount) allcount
		  from (SELECT dept.deptname,             
		              $decodesql$
		               decode(v.EateryTYPEID, #break:VARCHAR#, count(v.EMPID), 0) as allbreak,
		               decode(v.EateryTYPEID, #lunch:VARCHAR#, count(v.EMPID), 0) as alllunch,
		               decode(v.EateryTYPEID, #supper:VARCHAR#, count(v.EMPID), 0) as allsupper,
		               decode(v.EateryTYPEID, #dinner:VARCHAR#, count(v.EMPID), 0) as alldinner,
		               count(v.EMPID) as allcount
		        
		          FROM ar_eatery_records_v v, hr_department dept
		         where  v.fourthdeptid = dept.deptid(+)
		           and v.CPNY_ID = #cpnyId:VARCHAR#
		         group by v.EateryTYPEID, dept.deptname, v.MONTH) t
		
		 group by t.deptname
			
		]]>
	</select>
	
	<select id="getResultTemporary" resultClass="SimpleMap">
		<![CDATA[
			SELECT '临时卡' AS 临时卡,
			       $sql2$
			  FROM T_AR_EATERY_RECORDS A, GM_EATERY GE
			 WHERE TO_CHAR(A.R_TIME,'HH24:MI') BETWEEN GE.GM_FROM_DATE AND GE.GM_TO_DATE
		   AND A.CARD_TYPE IN ('2','3','4','6')
		]]>
	</select>
	
	<select id="getResultTotal" resultClass="SimpleMap">
		<![CDATA[
			SELECT 	$sqlTotal$
			  FROM (SELECT T.EMPID, T.R_TIME, T.MONTH, T.CARD_TYPE
			          FROM T_AR_EATERY_RECORDS T) A,
			       GM_EATERY G,
			       (SELECT HE.EMPID, HD.DEPTID, HD.DEPTNAME, HD.FOURTHDEPT
			          FROM HR_EMPLOYEE HE, HR_DEPT_TREE_V HD
			         WHERE HE.DEPTID = HD.DEPTID
			           AND HE.EMP_DIFF_CODE = 'C_12067_1330306') HR,
			       HR_DEPARTMENT HD,
			       GM_EATERY_CARDTYPE GEC
			 WHERE A.EMPID = HR.EMPID
			   AND HR.FOURTHDEPT = HD.DEPTID
			   AND TO_CHAR(A.R_TIME, 'HH24:MI') >= G.GM_FROM_DATE
			   AND TO_CHAR(A.R_TIME, 'HH24:MI') <= G.GM_TO_DATE
			   AND GEC.TYPE_NO = A.CARD_TYPE
		]]>
	</select>
	
	<select id="getCountTable" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
			SELECT COUNT(*) FROM ALL_TAB_COLUMNS A WHERE A.TABLE_NAME = 'T_AR_EATERY_RECORDS'
		]]>
	</select>
	
	<update id="CreateTable" parameterClass="SimpleMap">
		<![CDATA[
		create table T_AR_EATERY_RECORDS as (SELECT T.EMPID,T.R_TIME,TO_CHAR(T.R_TIME,'MM') AS MONTH,T.CARD_TYPE,T.CARD_NO
	          FROM AR_EATERY_RECORDS T
	         WHERE TO_CHAR(T.R_TIME, 'YYYY') = '$year$')
		]]>
	</update>
	
	<update id="deleteApply" parameterClass="SimpleMap">
		<![CDATA[
		     UPDATE ga_card_application gca
     			SET gca.active=0  			   
   				WHERE gca.card_id = #GM_ID#
		]]>
	</update>
	
	<update id="DropTable" parameterClass="SimpleMap">
		<![CDATA[
			DROP TABLE T_AR_EATERY_RECORDS
		]]>
	</update>
	
	<select id="getAllCardType" resultClass="SimpleMap">
		<![CDATA[
			select * from gm_eatery_cardtype t
		]]>
	</select>
	
	<select id="resultMonth" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
SELECT B.*,
       nvl(qz.breakfast,0) 早餐签字,
       nvl(qz.lunch,0) 午餐签字,
       nvl(qz.dinner,0) 晚餐签字,
       nvl(qz.night,0) 夜餐签字,
       nvl(tb.breakfast,0) 早餐通报,
       nvl(tb.lunch,0) 午餐通报,
       nvl(tb.dinner,0) 晚餐通报,
       nvl(tb.night,0) 夜餐通报,
       nvl(jc.cun,0) 加餐,
       nvl(vip.cun,0) VIP食堂,
       (B.早餐刷卡+nvl(qz.breakfast,0)) 早餐合计,
       (B.午餐刷卡+nvl(qz.lunch,0)) 午餐合计,
       (B.晚餐刷卡+nvl(qz.dinner,0)) 晚餐合计,
       (B.夜餐刷卡+nvl(qz.night,0)) 夜餐合计,
       case when (nvl(tb.breakfast,0)-(B.早餐刷卡+nvl(qz.breakfast,0)))>0
       then ROUND((nvl(tb.breakfast,0)-(B.早餐刷卡+nvl(qz.breakfast,0)))*0.7)+(B.早餐刷卡+nvl(qz.breakfast,0))
       else (B.早餐刷卡+nvl(qz.breakfast,0))
       end as 早餐结账,
       case when (nvl(tb.lunch,0)-(B.午餐刷卡+nvl(qz.lunch,0)))>0
       then ROUND((nvl(tb.lunch,0)-(B.午餐刷卡+nvl(qz.lunch,0)))*0.7)+(B.午餐刷卡+nvl(qz.lunch,0))
       else (B.午餐刷卡+nvl(qz.lunch,0))
       end as 午餐结账,
       case when (nvl(tb.dinner,0)-(B.晚餐刷卡+nvl(qz.dinner,0)))>0
       then ROUND((nvl(tb.dinner,0)-(B.晚餐刷卡+nvl(qz.dinner,0)))*0.7)+(B.晚餐刷卡+nvl(qz.dinner,0))
       else (B.晚餐刷卡+nvl(qz.dinner,0))
       end as 晚餐结账,
       case when (nvl(tb.night,0)-(B.夜餐刷卡+nvl(qz.night,0)))>0
       then ROUND((nvl(tb.night,0)-(B.夜餐刷卡+nvl(qz.night,0)))*0.7)+(B.夜餐刷卡+nvl(qz.night,0))
       else (B.夜餐刷卡+nvl(qz.night,0))
       end as 夜餐结账
       
  FROM (SELECT A.DAY,
               A.晚餐刷卡,
               C.夜餐刷卡,
               A.早餐刷卡,
               A.午餐刷卡        
          FROM (SELECT DAY,
                       COUNT(CASE
                               WHEN G.GM_ID = 42 THEN
                                A.EMPID
                             END) AS 晚餐刷卡,                    
                       COUNT(CASE
                               WHEN G.GM_ID = 26 THEN
                                A.EMPID
                             END) AS 早餐刷卡,
                       COUNT(CASE
                               WHEN G.GM_ID = 40 THEN
                                A.EMPID
                             END) AS 午餐刷卡
                
                  FROM (SELECT T.R_TIME,
                               T.EMPID,
                               T.CARD_TYPE,
                               TO_CHAR(T.R_TIME, 'YYYY-MM-DD') AS DAY
                          FROM AR_EATERY_RECORDS T) A,
                       GM_EATERY G
                 WHERE TO_CHAR(A.R_TIME, 'HH24:MI') BETWEEN G.GM_FROM_DATE AND
                       G.GM_TO_DATE
                   AND TO_CHAR(A.R_TIME, 'YYYY-MM-dd') between #areaStart:VARCHAR# and
                       #areaEnd:VARCHAR#
                 GROUP BY A.DAY
                 ORDER BY A.DAY) A,(SELECT DAY,                       
                       COUNT(CASE
                               WHEN G.GM_ID = 43 THEN
                                A.EMPID
                             END) AS 夜餐刷卡
                  FROM (SELECT T.R_TIME,
                               T.EMPID,
                               T.CARD_TYPE,
                               TO_CHAR((T.R_TIME-1), 'YYYY-MM-DD') AS DAY
                          FROM AR_EATERY_RECORDS T) A,
                       GM_EATERY G
                 WHERE TO_CHAR(A.R_TIME, 'HH24:MI') BETWEEN G.GM_FROM_DATE AND
                       G.GM_TO_DATE
                   AND TO_CHAR((A.R_TIME-1), 'YYYY-MM-dd') between #areaStart:VARCHAR# and
                       #areaEnd:VARCHAR#
                 GROUP BY A.DAY
                 ORDER BY A.DAY)C
                 WHERE A.DAY=C.DAY) B,
       (select * from gm_eaterycount_tb t where t.item = 'qz') qz,
       (select * from gm_eaterycount_tb t where t.item = 'tb') tb,
       (select * from gm_eaterycount_jc t where t.item = 'jc') jc,
       (select * from gm_eaterycount_jc t where t.item = 'vip') vip
 where B.DAY = qz.applydate(+)
   AND B.DAY = tb.applydate(+)
   AND B.DAY = jc.applydate(+)
   AND B.DAY = vip.applydate(+)
   ORDER BY B.DAY
		]]>
	</select>
	
	<select id="resultEateryNum" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			SELECT HD.DEPTNAME,
			       
					$sql1$

			  FROM (
			           SELECT HE.FOURTHDEPTID AS DEPTID
			                 
								$sql2$
		                 
		            FROM GM_EATERY G, AR_EATERY_RECORDS A, HR_EMP_V HE, GM_EATERY_CARDTYPE GC
		           WHERE A.EMPID = HE.EMPID
		             AND GC.TYPE_NO = A.CARD_TYPE
		             AND TO_CHAR(A.R_TIME,'HH24:MI') BETWEEN G.GM_FROM_DATE AND G.GM_TO_DATE
		             AND TO_CHAR(A.R_TIME,'YYYY-MM-DD') >= #startdate:VARCHAR#
		             AND TO_CHAR(A.R_TIME,'YYYY-MM-DD') <= #enddate:VARCHAR#
		           GROUP BY ROLLUP (HE.FOURTHDEPTID)
		       )Z,
		       (
		         SELECT HD.FOURTHDEPT AS DEPTID

						$sql3$		                 

		            FROM GA_CARD_APPLICATION        GA,		               
		                 HR_DEPT_TREE_V              HD,
		                 AR_EATERY_RECORDS          A,
		                 GM_EATERY                  GE
		           WHERE GA.ACTIVE = 1		            
		             AND HD.DEPTID = GA.CARD_DET
		             AND A.CARD_NO = GA.CARD_NO
		             AND A.CARD_TYPE = 2
		             AND TO_CHAR(A.R_TIME,'HH24:MI') BETWEEN GE.GM_FROM_DATE AND GE.GM_TO_DATE
		             AND TO_CHAR(A.R_TIME,'YYYY-MM-DD') >= #startdate:VARCHAR#
		             AND TO_CHAR(A.R_TIME,'YYYY-MM-DD') <= #enddate:VARCHAR#
		           GROUP BY ROLLUP(HD.FOURTHDEPT)
		       ) X,
		       HR_DEPARTMENT HD
		  WHERE Z.DEPTID = X.DEPTID(+)
		    AND HD.DEPTID = Z.DEPTID
		    group by rollup(HD.DEPTNAME)		    
		]]>
	</select>
	
		<select id="company" parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			SELECT SUM(A.早餐结账) 早餐就餐人数,
       SUM(A.午餐结账) 午餐就餐人数,
       SUM(A.晚餐结账) 晚餐就餐人数,
       SUM(A.夜餐结账) 夜餐就餐人数,
       SUM(A.加餐)     加餐就餐人数,
       '5' 早餐单价,
       '8' 午餐单价,
       '8' 晚餐单价,
       '8' 夜餐单价,
       '8' 加餐单价,
       SUM(A.早餐结账)*5 早餐金额,
       SUM(A.午餐结账)*8 午餐金额,
       SUM(A.晚餐结账)*8 晚餐金额,
       SUM(A.夜餐结账)*8 夜餐金额,
       SUM(A.加餐)*3     加餐金额,
       (SUM(A.早餐结账)+
       SUM(A.午餐结账)+
       SUM(A.晚餐结账)+
       SUM(A.夜餐结账) +
       SUM(A.加餐) )就餐人数合计,
       (SUM(A.早餐结账)*5 +
       SUM(A.午餐结账)*8 +
       SUM(A.晚餐结账)*8 +
       SUM(A.夜餐结账)*8 +
       SUM(A.加餐)*3 )  就餐金额合计
       
  FROM (SELECT B.DAY,
               case
                 when (nvl(tb.breakfast, 0) -
                      (B.早餐刷卡 + nvl(qz.breakfast, 0))) > 0 then
                  ROUND((nvl(tb.breakfast, 0) -
                        (B.早餐刷卡 + nvl(qz.breakfast, 0))) * 0.7) +
                  (B.早餐刷卡 + nvl(qz.breakfast, 0))
                 else
                  (B.早餐刷卡 + nvl(qz.breakfast, 0))
               end as 早餐结账,
               case
                 when (nvl(tb.lunch, 0) - (B.午餐刷卡 + nvl(qz.lunch, 0))) > 0 then
                  (nvl(tb.lunch, 0) - (B.午餐刷卡 + nvl(qz.lunch, 0))) * 0.7 +
                  (B.早餐刷卡 + nvl(qz.lunch, 0))
                 else
                  (B.午餐刷卡 + nvl(qz.lunch, 0))
               end as 午餐结账,
               case
                 when (nvl(tb.dinner, 0) - (B.晚餐刷卡 + nvl(qz.dinner, 0))) > 0 then
                  (nvl(tb.dinner, 0) - (B.晚餐刷卡 + nvl(qz.dinner, 0))) * 0.7 +
                  (B.早餐刷卡 + nvl(qz.dinner, 0))
                 else
                  (B.晚餐刷卡 + nvl(qz.dinner, 0))
               end as 晚餐结账,
               case
                 when (nvl(tb.night, 0) - (B.夜餐刷卡 + nvl(qz.night, 0))) > 0 then
                  ROUND((nvl(tb.night, 0) - (B.夜餐刷卡 + nvl(qz.night, 0))) * 0.7) +
                  (B.早餐刷卡 + nvl(qz.night, 0))
                 else
                  (B.夜餐刷卡 + nvl(qz.night, 0))
               end as 夜餐结账,
               (nvl(jc.cun, 0) + nvl(vip.cun, 0)) 加餐
        
          FROM (SELECT A.DAY, A.晚餐刷卡, A.夜餐刷卡, A.早餐刷卡, A.午餐刷卡
                  FROM (SELECT DAY,
                               COUNT(CASE
                                       WHEN G.GM_ID = 42 THEN
                                        A.EMPID
                                     END) AS 晚餐刷卡,
                               COUNT(CASE
                                       WHEN G.GM_ID = 43 THEN
                                        A.EMPID
                                     END) AS 夜餐刷卡,
                               COUNT(CASE
                                       WHEN G.GM_ID = 26 THEN
                                        A.EMPID
                                     END) AS 早餐刷卡,
                               COUNT(CASE
                                       WHEN G.GM_ID = 40 THEN
                                        A.EMPID
                                     END) AS 午餐刷卡
                        
                          FROM (SELECT T.R_TIME,
                                       T.EMPID,
                                       T.CARD_TYPE,
                                       TO_CHAR(T.R_TIME, 'YYYY-MM-DD') AS DAY
                                  FROM AR_EATERY_RECORDS T) A,
                               GM_EATERY G
                         WHERE TO_CHAR(A.R_TIME, 'HH24:MI') BETWEEN
                               G.GM_FROM_DATE AND G.GM_TO_DATE
                           AND TO_CHAR(A.R_TIME, 'YYYY-MM-dd') between
                               #areaStart1:VARCHAR# and #areaEnd1:VARCHAR#
                         GROUP BY A.DAY
                         ORDER BY A.DAY) A) B,
               (select * from gm_eaterycount_tb t where t.item = 'qz') qz,
               (select * from gm_eaterycount_tb t where t.item = 'tb') tb,
               (select * from gm_eaterycount_jc t where t.item = 'jc') jc,
               (select * from gm_eaterycount_jc t where t.item = 'vip') vip
         where B.DAY = qz.applydate(+)
           AND B.DAY = tb.applydate(+)
           AND B.DAY = jc.applydate(+)
           AND B.DAY = vip.applydate(+)) A
           order by B.DAY
		]]>
	</select>
	
	<select id="eateryCountsExcel" parameterClass="SimpleMap" resultClass="SimpleMap">
	<![CDATA[
				select 
				dept.DEPTID,
				dept.DEPTNAME,
				NVL(recodedata.break,0) break,
				NVL(recodedata.lunch,0) lunch,
				NVL(recodedata.supper,0) supper,
				NVL(recodedata.dinner,0) dinner,
				NVL(recodedata.allcounts,0) allcounts,
				NVL(employeeApplydata.breaknum,0) localbreaknum,
				NVL(employeeApplydata.lunchnum,0) locallunchnum,
				NVL(employeeApplydata.suppernum,0) localsuppernum,
				NVL(employeeApplydata.dinnernum,0) localdinnernum,
				NVL(employeeApplydata.alllocalnum,0) alllocalnum,
				NVL(externaldata.breaknum,0) externaldatabreaknum,
				NVL(externaldata.lunchnum,0) externaldatalunchnum,
				NVL(externaldata.suppernum,0) externaldatasuppernum,
				NVL(externaldata.dinnernum,0) externaldatadinnernum,
				NVL(externaldata.allexternalnum,0) allexternalnum
				from  hr_dept_tree_v dept,(select 
				sum(recodes.break) break,
				sum(recodes.lunch) lunch,
				sum(recodes.supper) supper,
				sum(recodes.dinner) dinner,
				sum(recodes.allcounts) allcounts,
				recodes.fourthdeptid 
				from 
				(select
				t.fourthdeptid, 
				decode(t.EateryTYPEID,#break:VARCHAR#,count(t.EMPID),0) break,
				decode(t.EateryTYPEID,#lunch:VARCHAR#,count(t.EMPID),0) lunch,
				decode(t.EateryTYPEID,#supper:VARCHAR#,count(t.EMPID),0) supper,
				decode(t.EateryTYPEID,#dinner:VARCHAR#,count(t.EMPID),0) dinner,
				count(t.EMPID) allcounts
				from ar_eatery_records_v t
				where t.CPNY_ID=#cpnyId:VARCHAR#
				and to_char(t.R_TIME,'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#
				and t.CARD_TYPE<>'2'
				group by t.fourthdeptid,t.EateryTYPEID)recodes
				group by recodes.fourthdeptid ) recodedata,
				(select
				sum(localdata.breaknum) breaknum,
				 sum(localdata.lunchnum) lunchnum,
				 sum(localdata.suppernum) suppernum,
				 sum(localdata.dinnernum) dinnernum,
				 (sum(localdata.breaknum)+sum(localdata.lunchnum)+sum(localdata.suppernum)+sum(localdata.dinnernum)) alllocalnum, 
				 localdata. fourdeptid
				  from (select eaterydata.break * timedata.daynum * timedata.user_num as breaknum,
				               eaterydata.lunch * timedata.daynum * timedata.user_num as lunchnum,
				               eaterydata.supper * timedata.daynum * timedata.user_num as suppernum,
				               eaterydata.dinner * timedata.daynum * timedata.user_num as dinnernum,
				               hr_get_level_deptid(timedata.applyer_dept, 4) fourdeptid
				          from (select count(calender.workdayflag) daynum,
				                       t.apply_no,
				                       t.user_num,
				                       t.applyer_dept
				                  from ga_card_application t, ar_calender calender
				                 where calender.cpny_id = #cpnyId:VARCHAR#
				                   and t.employee_type = 'Local'
				                   and t.cpny_id = #cpnyId:VARCHAR#             
				                   and t.isconfirm=1
				                   and calender.ddate between t.start_date and t.end_date
				                   and to_char(calender.ddate,'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#
				                
				                 group by t.apply_no, t.user_num, t.applyer_dept) timedata,
				               (select t.apply_no,
				                       case
				                         when instr(t.eatery_type, #break:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as break,
				                       case
				                         when instr(t.eatery_type, #lunch:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as lunch,
				                       case
				                         when instr(t.eatery_type, #supper:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as supper,
				                       case
				                         when instr(t.eatery_type, #dinner:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as dinner
				                
				                  from ga_card_application t
				                 where t.employee_type = 'Local'
				                   and t.cpny_id = #cpnyId:VARCHAR#
				                   and t.isconfirm=1) eaterydata
				         where timedata.apply_no = eaterydata.apply_no
				        
				        )localdata
				group by  localdata. fourdeptid) employeeApplydata,
				(select
				sum(external.breaknum) breaknum,
				 sum(external.lunchnum) lunchnum,
				 sum(external.suppernum) suppernum,
				 sum(external.dinnernum) dinnernum,
				  (sum(external.breaknum)+sum(external.lunchnum)+sum(external.suppernum)+sum(external.dinnernum)) allexternalnum, 
				 external. fourdeptid
				  from (select eaterydata.break * timedata.daynum * timedata.user_num as breaknum,
				               eaterydata.lunch * timedata.daynum * timedata.user_num as lunchnum,
				               eaterydata.supper * timedata.daynum * timedata.user_num as suppernum,
				               eaterydata.dinner * timedata.daynum * timedata.user_num as dinnernum,
				               hr_get_level_deptid(timedata.applyer_dept, 4) fourdeptid
				          from (select count(calender.workdayflag) daynum,
				                       t.apply_no,
				                       t.user_num,
				                       t.applyer_dept
				                  from ga_card_application t, ar_calender calender
				                 where calender.cpny_id = #cpnyId:VARCHAR#
				                   and t.employee_type = 'external'
				                   and t.cpny_id =#cpnyId:VARCHAR#
				                    and t.isconfirm=1
				                   and calender.ddate between t.start_date and t.end_date
				                    and to_char(calender.ddate,'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#
				                
				                 group by t.apply_no, t.user_num, t.applyer_dept) timedata,
				               (select t.apply_no,
				                       case
				                         when instr(t.eatery_type, #break:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as break,
				                       case
				                         when instr(t.eatery_type, #lunch:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as lunch,
				                       case
				                         when instr(t.eatery_type, #supper:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as supper,
				                       case
				                         when instr(t.eatery_type, #dinner:VARCHAR#) <> 0 then
				                          1
				                         else
				                          0
				                       end as dinner
				                
				                  from ga_card_application t
				                 where t.employee_type = 'external'
				                   and t.cpny_id = #cpnyId:VARCHAR#
				                    and t.isconfirm=1) eaterydata
				         where timedata.apply_no = eaterydata.apply_no
				        
				        )external
				group by  external. fourdeptid)externaldata
				where dept.DEPT_LEVEL='4'
				and dept.cpny_id=#cpnyId:VARCHAR#
				and dept.DEPTID=recodedata.fourthdeptid(+)
				and dept.DEPTID=employeeApplydata.fourdeptid(+)
				and dept.DEPTID=externaldata.fourdeptid(+)
		]]>
	</select>

	<select id="eateryTotalByDeptExcel" parameterClass="SimpleMap" resultClass="SimpleMap">
	<![CDATA[
				SELECT  AET.fourthdeptid,
				        decode(get_dept_name(AET.fourthdeptid),'','其他',get_dept_name(AET.fourthdeptid)) AS DEPTNAME,
				        SUM(decode(AET.EateryTYPEID, #break:VARCHAR#, 1, 0)) break,
				        SUM(decode(AET.EateryTYPEID, #lunch:VARCHAR#, 1, 0)) lunch,
				        SUM(decode(AET.EateryTYPEID, #supper:VARCHAR#, 1, 0)) supper,
				        SUM(decode(AET.EateryTYPEID, #dinner:VARCHAR#, 1, 0)) dinner,
				        count(AET.EMPID) allcounts
				   FROM (SELECT T.EMPID,
				                T.R_TIME,
				                T.CARD_TYPE,
				                T.CARD_NO,
				                T.CPNY_ID,
				                get_eatery_type(to_char(T.R_TIME, 'YYYY-MM-DD HH24:MI'),
				                                T.CPNY_ID,
				                                'id') EateryTYPEID,
				                get_eatery_type(to_char(T.R_TIME, 'YYYY-MM-DD HH24:MI'),
				                                T.CPNY_ID,
				                                'name') EateryTYPEName,
				                get_eatery_fourthdept(t.empid, t.r_time, t.cpny_id) AS fourthdeptid
				           FROM AR_EATERY_RECORDS T
				          where t.CPNY_ID = #cpnyId:VARCHAR#
				            and substr(t.empid, 0, 2) IN ( 'LS','FK','JC')
				            and to_char(t.R_TIME, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#
				              ) AET
				  group by AET.fourthdeptid
				
		]]>
	</select>
	<select id="EateryMonthConsumeExcelDISD"  parameterClass="SimpleMap" resultClass="SimpleMap">
		<![CDATA[
			select basedata.ddate,
		       NVL(recodes.break, 0) recodesbreak,
		       NVL(recodes.lunch, 0) recodeslunch,
		       NVL(recodes.supper, 0) recodessupper,
		       NVL(recodes.dinner, 0) recodesdinner,
		       NVL(Localresult.breaknum, 0) localbreak,
		       NVL(Localresult.lunchnum, 0) locallunch,
		       NVL(Localresult.suppernum, 0) localsupper,
		       NVL(Localresult.dinnernum, 0) localdinner,
		       NVL(externalresult.breaknum, 0) externalbreak,
		       NVL(externalresult.lunchnum, 0) externallunch,
		       NVL(externalresult.suppernum, 0) externalsupper,
		       NVL(externalresult.dinnernum, 0) externaldinner,
		       (NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0)) realbreak,
		       (NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0)) reallunch,
		       (NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0)) realsupper,
		       (NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0)) realdinner,       
		       NVL(planresult.breakcounts, 0) planresultbreak,
		       NVL(planresult.lunchcounts, 0) planresultlunch,
		       NVL(planresult.suppercounts, 0) planresultsupper,
		       NVL(planresult.dinnercounts, 0) planresultdinner,
		       case
		       when  NVL(planresult.breakcounts, 0)-(NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))>0
		       then  round((NVL(planresult.breakcounts, 0)-(NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))
		       else (NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))
		       end as resultbreak,
		       case
		       when  NVL(planresult.lunchcounts, 0)-(NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))>0
		       then  round((NVL(planresult.lunchcounts, 0)-(NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))
		       else (NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))
		       end as resultlunch,
		       case
		       when  NVL(planresult.suppercounts, 0)-(NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))>0
		       then  round((NVL(planresult.suppercounts, 0)-(NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))
		       else (NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))
		       end as resultsupper,
		       case
		       when  NVL(planresult.dinnercounts, 0)-(NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))>0
		       then  round((NVL(planresult.dinnercounts, 0)-(NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))
		       else (NVL(recodes.break, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))
		       end as resultdinner
		      
		
		  from (select to_char(calender.ddate, 'YYYY-MM-DD') ddate
		          from ar_calender calender
		         where calender.cpny_id =#cpnyId:VARCHAR#
		           and to_char(calender.ddate, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR# ) basedata,
		       (select sdata.ddate,
		               sum(sdata.break) break,
		               sum(sdata.lunch) lunch,
		               sum(sdata.supper) supper,
		               sum(sdata.dinner) dinner
		        
		          from (select to_char(t.R_TIME, 'YYYY-MM-DD') ddate,
		                       decode(t.EateryTYPEID, #break:VARCHAR#, count(t.EMPID), 0) break,
		                       decode(t.EateryTYPEID, #lunch:VARCHAR#, count(t.EMPID), 0) lunch,
		                       decode(t.EateryTYPEID, #supper:VARCHAR#, count(t.EMPID), 0) supper,
		                       decode(t.EateryTYPEID, #dinner:VARCHAR#, count(t.EMPID), 0) dinner
		                  from ar_eatery_records_v t
		                 where t.CPNY_ID =#cpnyId:VARCHAR#
		                   and to_char(t.R_TIME, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#
		                   and t.CARD_TYPE <> '2'
		                 group by to_char(t.R_TIME, 'YYYY-MM-DD'), t.EateryTYPEID) sdata
		         group by sdata.ddate) recodes,
		       (select sum(externaldata.breaknum) as breaknum,
		               sum(externaldata.lunchnum) as lunchnum,
		               sum(externaldata.suppernum) as suppernum,
		               sum(externaldata.dinnernum) as dinnernum,
		               TO_CHAR(externaldata.ddate, 'YYYY-MM-DD') ddate
		          from (select eaterydata.break * timedata.daynum * timedata.user_num as breaknum,
		                       eaterydata.lunch * timedata.daynum * timedata.user_num as lunchnum,
		                       eaterydata.supper * timedata.daynum *
		                       timedata.user_num as suppernum,
		                       eaterydata.dinner * timedata.daynum *
		                       timedata.user_num as dinnernum,
		                       timedata.ddate
		                  from (select count(calender.workdayflag) daynum,
		                               t.apply_no,
		                               t.user_num,
		                               calender.ddate
		                          from ga_card_application t, ar_calender calender
		                         where calender.cpny_id =#cpnyId:VARCHAR#
		                           and t.employee_type = 'external'
		                           and t.cpny_id = #cpnyId:VARCHAR#
		                           and t.isconfirm = 1
		                           and calender.workdayflag = 1
		                           and calender.ddate between t.start_date and
		                               t.end_date
		                           and to_char(calender.ddate, 'YYYY-MM-DD') between   #StartDate:VARCHAR#  and #EndDate:VARCHAR#
		                        
		                         group by t.apply_no, t.user_num, calender.ddate) timedata,
		                       (select t.apply_no,
		                               case
		                                 when instr(t.eatery_type, #break:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as break,
		                               case
		                                 when instr(t.eatery_type, #lunch:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as lunch,
		                               case
		                                 when instr(t.eatery_type, #supper:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as supper,
		                               case
		                                 when instr(t.eatery_type, #dinner:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as dinner
		                        
		                          from ga_card_application t
		                         where t.employee_type = 'external'
		                           and t.cpny_id =#cpnyId:VARCHAR#
		                           and t.isconfirm = 1) eaterydata
		                 where timedata.apply_no = eaterydata.apply_no) externaldata
		         group by externaldata.ddate) externalresult,
		       (select sum(Localdata.breaknum) as breaknum,
		               sum(Localdata.lunchnum) as lunchnum,
		               sum(Localdata.suppernum) as suppernum,
		               sum(Localdata.dinnernum) as dinnernum,
		               TO_CHAR(Localdata.ddate, 'YYYY-MM-DD') ddate
		          from (select eaterydata.break * timedata.daynum * timedata.user_num as breaknum,
		                       eaterydata.lunch * timedata.daynum * timedata.user_num as lunchnum,
		                       eaterydata.supper * timedata.daynum *
		                       timedata.user_num as suppernum,
		                       eaterydata.dinner * timedata.daynum *
		                       timedata.user_num as dinnernum,
		                       timedata.ddate
		                  from (select count(calender.workdayflag) daynum,
		                               t.apply_no,
		                               t.user_num,
		                               calender.ddate
		                          from ga_card_application t, ar_calender calender
		                         where calender.cpny_id = #cpnyId:VARCHAR#
		                           and t.employee_type = 'Local'
		                           and t.cpny_id =#cpnyId:VARCHAR#
		                           and t.isconfirm = 1
		                           and calender.workdayflag = 1
		                           and calender.ddate between t.start_date and
		                               t.end_date
		                           and to_char(calender.ddate, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#                               
		                        
		                         group by t.apply_no, t.user_num, calender.ddate) timedata,
		                       (select t.apply_no,
		                               case
		                                 when instr(t.eatery_type, #break:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as break,
		                               case
		                                 when instr(t.eatery_type, #lunch:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as lunch,
		                               case
		                                 when instr(t.eatery_type, #supper:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as supper,
		                               case
		                                 when instr(t.eatery_type, #dinner:VARCHAR#) <> 0 then
		                                  1
		                                 else
		                                  0
		                               end as dinner
		                        
		                          from ga_card_application t
		                         where t.employee_type = 'Local'
		                           and t.cpny_id = #cpnyId:VARCHAR#
		                           and t.isconfirm = 1) eaterydata
		                 where timedata.apply_no = eaterydata.apply_no) Localdata
		         group by Localdata.ddate) Localresult,
		       (select sum(lunchcounts) lunchcounts,
		               sum(suppercounts) suppercounts,
		               sum(dinnercounts) dinnercounts,
		               sum(breakcounts) breakcounts,
		               ddate
		          from (select NVL(decode(countdata.countm_type,
		                                  #lunch:VARCHAR#,
		                                  countdata.count_num),
		                           0) lunchcounts,
		                       NVL(decode(countdata.countm_type,
		                                  #supper:VARCHAR#,
		                                  countdata.count_num),
		                           0) suppercounts,
		                       NVL(decode(countdata.countm_type,
		                                  #dinner:VARCHAR#,
		                                  countdata.count_num),
		                           0) dinnercounts,
		                       NVL(decode(countdata.countm_type,
		                                  #break:VARCHAR#,
		                                  countdata.count_num),
		                           0) breakcounts,
		                       countdata.ddate
		                  from (select t.countm_type,
		                               to_char(count_date, 'YYYY-MM-DD') ddate,
		                               t.count_num
		                          from gm_eatery_confirm t
		                         where t.cpny_id = #cpnyId:VARCHAR#
		                           and t.flag = 1
		                           and to_char(count_date, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#		                              
		                           and t.countm_type in (#supper:VARCHAR#, #break:VARCHAR#, #lunch:VARCHAR#,#dinner:VARCHAR#)) countdata)
		         group by ddate) planresult
		 where basedata.ddate = recodes.ddate(+)
		   and basedata.ddate = Localresult.ddate(+)
		   and basedata.ddate = externalresult.ddate(+)
		   and basedata.ddate = planresult.ddate(+)
		 order by basedata.ddate		 
		 	]]>
	
	</select>
	
	<select id="EateryMonthConsumeExcelDICC"  parameterClass="SimpleMap" resultClass="SimpleMap">
	<![CDATA[
	
			select basedata.ddate,
		       NVL(recodes.break, 0) recodesbreak,
		       NVL(recodes.lunch, 0) recodeslunch,
		       NVL(recodes.supper, 0) recodessupper,
		       NVL(recodes.dinner, 0) recodesdinner,
		       NVL(Localresult.breaknum, 0) localbreak,
		       NVL(Localresult.lunchnum, 0) locallunch,
		       NVL(Localresult.suppernum, 0) localsupper,
		       NVL(Localresult.dinnernum, 0) localdinner,
		       NVL(externalresult.breaknum, 0) externalbreak,
		       NVL(externalresult.lunchnum, 0) externallunch,
		       NVL(externalresult.suppernum, 0) externalsupper,
		       NVL(externalresult.dinnernum, 0) externaldinner,
		       (NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0)) realbreak,
		       (NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0)) reallunch,
		       (NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0)) realsupper,
		       (NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0)) realdinner,       
		       NVL(planresult.breakcounts, 0) planresultbreak,
		       NVL(planresult.lunchcounts, 0) planresultlunch,
		       NVL(planresult.suppercounts, 0) planresultsupper,
		       NVL(planresult.dinnercounts, 0) planresultdinner,
		       case
		       when  NVL(planresult.breakcounts, 0)-(NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))>0
		       then  round((NVL(planresult.breakcounts, 0)-(NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))
		       else (NVL(recodes.break, 0)+NVL(Localresult.breaknum, 0)+NVL(externalresult.breaknum, 0))
		       end as resultbreak,
		       case
		       when  NVL(planresult.lunchcounts, 0)-(NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))>0
		       then  round((NVL(planresult.lunchcounts, 0)-(NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))
		       else (NVL(recodes.lunch, 0)+NVL(Localresult.lunchnum, 0)+NVL(externalresult.lunchnum, 0))
		       end as resultlunch,
		       case
		       when  NVL(planresult.suppercounts, 0)-(NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))>0
		       then  round((NVL(planresult.suppercounts, 0)-(NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))
		       else (NVL(recodes.supper, 0)+NVL(Localresult.suppernum, 0)+NVL(externalresult.suppernum, 0))
		       end as resultsupper,
		       case
		       when  NVL(planresult.dinnercounts, 0)-(NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))>0
		       then  round((NVL(planresult.dinnercounts, 0)-(NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))-#floatingNum:NUMERIC#)*#Rate:NUMERIC#/100)+(NVL(recodes.dinner, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))
		       else (NVL(recodes.break, 0)+NVL(Localresult.dinnernum, 0)+NVL(externalresult.dinnernum, 0))
		       end as resultdinner
		      
		
		  from (select to_char(calender.ddate, 'YYYY-MM-DD') ddate
		          from ar_calender calender
		         where calender.cpny_id = #cpnyId:VARCHAR#
		           and to_char(calender.ddate, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#	 ) basedata,
		       (select sdata.ddate,
		               sum(sdata.break) break,
		               sum(sdata.lunch) lunch,
		               sum(sdata.supper) supper,
		               sum(sdata.dinner) dinner
		        
		          from (select to_char(t.R_TIME, 'YYYY-MM-DD') ddate,
		                       decode(t.EateryTYPEID, #break:VARCHAR#, count(t.EMPID), 0) break,
		                       decode(t.EateryTYPEID, #lunch:VARCHAR#, count(t.EMPID), 0) lunch,
		                       decode(t.EateryTYPEID, #supper:VARCHAR#, count(t.EMPID), 0) supper,
		                       decode(t.EateryTYPEID, #dinner:VARCHAR#, count(t.EMPID), 0) dinner
		                  from ar_eatery_records_v t
		                 where T.CPNY_ID = #cpnyId:VARCHAR#
		                   and to_char(t.R_TIME, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#	
		                   and t.CARD_TYPE <> '2'
		                 group by to_char(t.R_TIME, 'YYYY-MM-DD'), t.EateryTYPEID) sdata
		         group by sdata.ddate) recodes,
		       (select 
		externaldata.ddate,
		sum(externaldata.break) breaknum, 
		sum(externaldata.lunch)  lunchnum,
		sum(externaldata.supper) suppernum,
		sum(externaldata.dinner)  dinnernum
		from 
		(
		select 
		baseapply.ddate,
		 decode(recodes.EateryTYPEID, #break:VARCHAR#, count(recodes.EMPID), 0)  break,
		 decode(recodes.EateryTYPEID, #lunch:VARCHAR#, count(recodes.EMPID), 0)  lunch,
		 decode(recodes.EateryTYPEID, #supper:VARCHAR#, count(recodes.EMPID), 0)  supper,
		 decode(recodes.EateryTYPEID, #dinner:VARCHAR#, count(recodes.EMPID), 0)  dinner
		from 
		ar_eatery_records_v recodes,(
		select provide.serial_number,
		       provide.card_number,
		       provide.pkno,       
		       count(calender.ddate) cuns,
		       to_char(calender.ddate, 'YYYY-MM-DD') ddate
		  from ga_card_provide     provide,
		       ga_card_application apply,
		       ar_calender         calender
		 where provide.flag != 0
		   and provide.apply_no = apply.apply_no(+)
		   and apply.employee_type = 'external'
		   and apply.cpny_id = #cpnyId:VARCHAR#
		   and apply.isconfirm = 1
		   and provide.cpnyid = #cpnyId:VARCHAR#
		   and calender.cpny_id = #cpnyId:VARCHAR#
		   and calender.ddate between apply.start_date and apply.end_date
		   group by provide.serial_number,
		          provide.card_number,
		          provide.pkno,
		          apply.user_num,
		          calender.ddate
		       ) baseapply
		       
		 where recodes.card_no=baseapply.card_number
		 and recodes.cpny_id=#cpnyId:VARCHAR#
		 and to_char(recodes.r_time,'YYYY-MM-DD')=baseapply.ddate
		 group by baseapply.ddate,recodes.EateryTYPEID
		 )externaldata
		 group by externaldata.ddate) externalresult,
		       (select 
		externaldata.ddate,
		sum(externaldata.break) breaknum, 
		sum(externaldata.lunch)  lunchnum,
		sum(externaldata.supper) suppernum,
		sum(externaldata.dinner)  dinnernum
		from 
		(
		select 
		baseapply.ddate,
		 decode(recodes.EateryTYPEID, #break:VARCHAR#, count(recodes.EMPID), 0)  break,
		 decode(recodes.EateryTYPEID, #lunch:VARCHAR#, count(recodes.EMPID), 0)  lunch,
		 decode(recodes.EateryTYPEID, #supper:VARCHAR#, count(recodes.EMPID), 0)  supper,
		 decode(recodes.EateryTYPEID, #dinner:VARCHAR#, count(recodes.EMPID), 0)  dinner
		from 
		ar_eatery_records_v recodes,(
		select provide.serial_number,
		       provide.card_number,
		       provide.pkno,       
		       count(calender.ddate) cuns,
		       to_char(calender.ddate, 'YYYY-MM-DD') ddate
		  from ga_card_provide     provide,
		       ga_card_application apply,
		       ar_calender         calender
		 where provide.flag != 0
		   and provide.apply_no = apply.apply_no(+)
		   and apply.employee_type = 'Local'
		   and apply.cpny_id = #cpnyId:VARCHAR#
		   and apply.isconfirm = 1
		   and provide.cpnyid = #cpnyId:VARCHAR#
		   and calender.cpny_id = #cpnyId:VARCHAR#
		   and calender.ddate between apply.start_date and apply.end_date
		   group by provide.serial_number,
		          provide.card_number,
		          provide.pkno,
		          apply.user_num,
		          calender.ddate
		       ) baseapply
		       
		 where recodes.card_no=baseapply.card_number
		 and recodes.cpny_id=#cpnyId:VARCHAR#
		 and to_char(recodes.r_time,'YYYY-MM-DD')=baseapply.ddate
		 group by baseapply.ddate,recodes.EateryTYPEID
		 )externaldata
		 group by externaldata.ddate) Localresult,
		       (select sum(lunchcounts) lunchcounts,
		               sum(suppercounts) suppercounts,
		               sum(dinnercounts) dinnercounts,
		               sum(breakcounts) breakcounts,
		               ddate
		          from (select NVL(decode(countdata.countm_type,
		                                  #lunch:VARCHAR#,
		                                  countdata.count_num),
		                           0) lunchcounts,
		                       NVL(decode(countdata.countm_type,
		                                  #supper:VARCHAR#,
		                                  countdata.count_num),
		                           0) suppercounts,
		                       NVL(decode(countdata.countm_type,
		                                  #dinner:VARCHAR#,
		                                  countdata.count_num),
		                           0) dinnercounts,
		                       NVL(decode(countdata.countm_type,
		                                  #break:VARCHAR#,
		                                  countdata.count_num),
		                           0) breakcounts,
		                       countdata.ddate
		                  from (select t.countm_type,
		                               to_char(count_date, 'YYYY-MM-DD') ddate,
		                               t.count_num
		                          from gm_eatery_confirm t
		                         where t.cpny_id = #cpnyId:VARCHAR#
		                           and t.flag = 1
		                           and to_char(count_date, 'YYYY-MM-DD') between #StartDate:VARCHAR#  and #EndDate:VARCHAR#			                              
		                           and t.countm_type in (#supper:VARCHAR#, #break:VARCHAR#, #lunch:VARCHAR#,#dinner:VARCHAR#)) countdata)
		         group by ddate) planresult
		 where basedata.ddate = recodes.ddate(+)
		   and basedata.ddate = Localresult.ddate(+)
		   and basedata.ddate = externalresult.ddate(+)
		   and basedata.ddate = planresult.ddate(+)
		 order by basedata.ddate
	
	
	]]>
	</select>
	
	<select id="gmVegetableViewList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			select t.veget_id,
			       t.veget_name,
			       t.material,
			       t.method,
			       t.login_date,
			       t.develop
			  from gm_vegetable t
			 where T.CPNY_ID = #cpnyId:VARCHAR#
			

		]]>
		<isNotEmpty prepend="AND" property="startDate">
			<![CDATA[
				 to_char(t.login_date, 'yyyy-MM-dd') >= #startDate:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="endDate">
			<![CDATA[
				to_char(t.login_date, 'yyyy-MM-dd') <= #endDate:VARCHAR#
			]]>
		</isNotEmpty>
		<![CDATA[
			
			 order by t.login_date

		]]>
	</select>
	
	<select id="gmVegetableAll" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			select t.veget_id,
			       t.veget_name,
			       t.material,
			       t.method,
			       t.login_date,
			       t.develop
			  from gm_vegetable t
			 where T.CPNY_ID = #cpnyId:VARCHAR#
		]]>
		
	</select>
	
	<insert id="insertGmVegetable" parameterClass="SimpleMap">
		<![CDATA[
			insert into gm_vegetable (veget_id,veget_name,material,method,login_date,develop,CREATE_DATE,CREATE_BY,CPNY_ID) 
			values(#veget_id:VARCHAR#,#veget_name:VARCHAR#,#material:VARCHAR#,#method:VARCHAR#,TO_DATE(#login_date:VARCHAR#,'YYYY-MM-DD'),#develop:VARCHAR#,SYSDATE,#AdminID:VARCHAR#,#cpnyId:VARCHAR#)
		]]>
	</insert>
	
	<select id="validateGmVegetable" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
		
		 select count(*) from gm_vegetable where veget_id = #veget_id:VARCHAR#
			  
		]]>
	</select>
	
	<select id="gmGmVegetableById" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
		    select t.veget_id,
			       t.veget_name,
			       t.material,
			       t.method,
			       t.login_date,
			       t.develop
			  from gm_vegetable t
			 where T.veget_id = #VEGET_ID:VARCHAR#
		]]>
	</select>
	
	<update id="updateGmVegetable" parameterClass="SimpleMap">
		<![CDATA[
		     UPDATE gm_vegetable 
     			SET veget_name = #veget_name:VARCHAR#,
     				material = #material:VARCHAR#,
     				method = #method:VARCHAR#,	 
     				login_date = TO_DATE(#login_date:VARCHAR#,'YYYY-MM-DD'), 
     				develop = #develop:VARCHAR#,
     				UPDATE_DATE = SYSDATE		
   				WHERE veget_id = #veget_id:VARCHAR#
		]]>
	</update>
	
	<delete id="deleteGmVegetable" parameterClass="SimpleMap">
		<![CDATA[
			delete from gm_vegetable t where veget_id = #VEGET_ID:VARCHAR#
		]]>
	</delete>
	<select id="gmMenuViewList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			select t.menu_id,
			       t.menu_date,
			       t.menu_eattype,
			       s.code_name menu_eattype_name,
			       t.veget_id,
			       g.veget_name,
			       g.material,
			       g.method,
			       t.maker
			  from gm_menu t, gm_vegetable g, sy_code s
			 where t.veget_id = g.veget_id and 
			       t.menu_eattype = s.code_id(+) and
			       T.CPNY_ID = #cpnyId:VARCHAR#

			

		]]>
		<isNotEmpty prepend="AND" property="startDate">
			<![CDATA[
				 to_char(t.menu_date, 'yyyy-MM-dd') >= #startDate:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="endDate">
			<![CDATA[
				to_char(t.menu_date, 'yyyy-MM-dd') <= #endDate:VARCHAR#
			]]>
		</isNotEmpty>
		<![CDATA[
			
			 order by t.menu_date,t.menu_eattype

		]]>
	</select>
	
	<select id="gmMenuViewPage" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			select t.menu_id,
			       t.menu_date,
			       t.menu_eattype,
			       s.code_name menu_eattype_name,
			       t.veget_id,
			       g.veget_name,
			       g.material,
			       g.method,
			       t.maker
			  from gm_menu t, gm_vegetable g, sy_code s
			 where t.veget_id = g.veget_id and 
			       t.menu_eattype = s.code_id(+) and
			       T.CPNY_ID = #cpnyId:VARCHAR#

			

		]]>
		<isNotEmpty prepend="AND" property="Date">
			<![CDATA[
				 to_char(t.menu_date, 'yyyy-MM-dd') = #Date:VARCHAR#
			]]>
		</isNotEmpty>
		<![CDATA[
			
			 order by t.menu_date,t.menu_eattype

		]]>
	</select>
	
	<select id="validateGmMenu" parameterClass="SimpleMap" resultClass="int">
		<![CDATA[
		
		 select count(*) from gm_menu where MENU_EATTYPE = #MENU_EATTYPE:VARCHAR# and MENU_DATE = TO_DATE(#MENU_DATE:VARCHAR#,'YYYY-MM-DD')
			  
		]]>
	</select>
	
	<insert id="insertGmMenu" parameterClass="SimpleMap">
		<![CDATA[
			insert into gm_menu (MENU_ID,MENU_DATE,MENU_EATTYPE,VEGET_ID,MAKER,CREATE_DATE,CREATE_BY,CPNY_ID) 
			values(GM_MENU_SEQ.NEXTVAL,TO_DATE(#MENU_DATE:VARCHAR#,'YYYY-MM-DD'),#MENU_EATTYPE:VARCHAR#,#VEGET_ID:VARCHAR#,#MAKER:VARCHAR#,SYSDATE,#AdminID:VARCHAR#,#cpnyId:VARCHAR#)
		]]>
	</insert>
	
	<select id="gmGmMenuById" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
		  select t.menu_id,
			       t.menu_date,
			       t.menu_eattype,
			       s.code_name menu_eattype_name,
			       t.veget_id,
			       g.veget_name,
			       g.material,
			       g.method,
			       t.maker
			  from gm_menu t, gm_vegetable g, sy_code s
			 where t.veget_id = g.veget_id and 
			       t.menu_eattype = s.code_id(+) and
			       T.menu_id = #MENU_ID:VARCHAR#
		]]>
	</select>
	
	<update id="updateGmMenu" parameterClass="SimpleMap">
		<![CDATA[
		     UPDATE gm_menu 
     			SET MENU_DATE = TO_DATE(#MENU_DATE:VARCHAR#,'YYYY-MM-DD'),
     				MENU_EATTYPE = #MENU_EATTYPE:VARCHAR#,
     				VEGET_ID = #VEGET_ID:VARCHAR#,	 
     				MAKER = #MAKER:VARCHAR#,
     				UPDATE_DATE = SYSDATE		
   				WHERE MENU_ID = #MENU_ID:VARCHAR#
		]]>
	</update>
	<delete id="deleteGmMenu" parameterClass="SimpleMap">
		<![CDATA[
			delete from gm_MENU t where MENU_ID = #MENU_ID#
		]]>
	</delete>
	<insert id="insertGmVegetableOpinion" parameterClass="SimpleMap">
		<![CDATA[
			insert into GM_VEGETABLE_OPINION (OPINION_ID,FILL_DATE,REPAST_DATE,MENU_EATTYPE,VEGET_ID,SANITATION,GREENNESS,TASTE,METHOD,ALIMENTATION,OTHER,GRADE,CREATE_DATE,CREATE_BY,CPNY_ID) 
			values(GM_VEGETABLE_OPINION_seq.NEXTVAL,sysdate,TO_DATE(#REPAST_DATE:VARCHAR#,'YYYY-MM-DD'),#MENU_EATTYPE:VARCHAR#,#VEGET_ID:VARCHAR#,#SANITATION:VARCHAR#,#GREENNESS:VARCHAR#,#TASTE:VARCHAR#,#METHOD:VARCHAR#,#ALIMENTATION:VARCHAR#,#OTHER:VARCHAR#,#GRADE:VARCHAR#,SYSDATE,#AdminID:VARCHAR#,#cpnyId:VARCHAR#)
		]]>
	</insert>
	
	<select id="gmVegetableOpinionViewList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			  select t.OPINION_ID,
             t.FILL_DATE,
             t.REPAST_DATE,
             t.menu_eattype,
             s.code_name menu_eattype_name,
             t.veget_id,
             g.veget_name,
             g.material,
             g.method,
             g.DEVELOP,
             t.SANITATION,
             t.GREENNESS,
             t.TASTE,
             t.METHOD METHODNAME,
             t.ALIMENTATION,
             t.OTHER,
             t.GRADE,
             t.CREATE_BY,
             t.CREATE_DATE,
             t.CPNY_ID,
             h.CHINESENAME,
             d.deptname,
             m.maker
        from gm_vegetable_opinion t, gm_vegetable g, sy_code s,hr_employee h ,hr_department d,gm_menu m
       where t.veget_id = g.veget_id and 
             t.repast_date = m.menu_date and
             t.menu_eattype = m.menu_eattype and
             t.veget_id = m.veget_id and 
             t.menu_eattype = s.code_id and
             t.CREATE_BY = h.person_id and h.deptid = d.deptid
             and T.CPNY_ID = #cpnyId:VARCHAR#

			

		]]>
		<isNotEmpty prepend="AND" property="startDate">
			<![CDATA[
				 to_char(t.REPAST_DATE, 'yyyy-MM-dd') >= #startDate:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="endDate">
			<![CDATA[
				to_char(t.REPAST_DATE, 'yyyy-MM-dd') <= #endDate:VARCHAR#
			]]>
		</isNotEmpty>
		<![CDATA[
			
			 order by t.REPAST_DATE,t.menu_eattype

		]]>
	</select>
	
	<select id="eateryExceptionViewList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			 select empid,chinesename,deptname,eaterytype,to_char(eaterytime,'YYYY-MM-DD HH24:MI') as eaterytime,to_char(mactime,'YYYY-MM-DD HH24:MI') as mactime from (
				(select h.empid,h.chinesename,d.deptname,'午餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 11:30', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 13:00', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 11:30', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 13:00', 'YYYY-MM-DD HH24:MI') 
				)
				union  
				( 
				 select h.empid,h.chinesename,d.deptname,'晚餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 16:30', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 17:50', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 16:00', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 18:20', 'YYYY-MM-DD HH24:MI') 
				   
				  )
				 union  
				( 
				 select h.empid,h.chinesename,d.deptname,'早餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 8:00', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 8:50', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 7:30', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 9:20', 'YYYY-MM-DD HH24:MI') 
				   
				  ) 
              ) t order by t.deptname,t.eaterytime
		]]>
		
	</select>
	
	
	
	<select id="eateryExceptionViewCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			
			 select count(*) from (
				(select h.empid,h.chinesename,d.deptname,'午餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 11:30', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 13:00', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 11:30', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 13:00', 'YYYY-MM-DD HH24:MI') 
				)
				union  
				( 
				 select h.empid,h.chinesename,d.deptname,'晚餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 16:30', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 17:50', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 16:00', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 18:20', 'YYYY-MM-DD HH24:MI') 
				   
				  )
				 union  
				( 
				 select h.empid,h.chinesename,d.deptname,'早餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 8:00', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 8:50', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 7:30', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 9:20', 'YYYY-MM-DD HH24:MI') 
				   
				  )
              )
		]]>
		
	</select>
	
	<select id="eateryExceptionExcelList" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			
			 select empid,chinesename,deptname,eaterytype,to_char(eaterytime,'YYYY-MM-DD HH24:MI') as eaterytime,to_char(mactime,'YYYY-MM-DD HH24:MI') as mactime from (
				(select h.empid,h.chinesename,d.deptname,'午餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 11:30', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 13:00', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 11:30', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 13:00', 'YYYY-MM-DD HH24:MI') 
				)
				union  
				( 
				 select h.empid,h.chinesename,d.deptname,'晚餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 16:30', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 17:50', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 16:00', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 18:20', 'YYYY-MM-DD HH24:MI') 
				   
				  )
				 union  
				( 
				 select h.empid,h.chinesename,d.deptname,'早餐' as eaterytype,t.r_time as eaterytime ,a.r_time as mactime
				  from ar_eatery_records t, ar_mac_records a,hr_employee h ,hr_department d
				 where t.empid = a.empid
				    and   t.empid = h.person_id(+)
				    and  h.deptid = d.deptid(+)
				   and t.cpny_id = #cpnyId:VARCHAR#
				   AND t.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 8:00', 'YYYY-MM-DD HH24:MI')
				   AND t.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 8:50', 'YYYY-MM-DD HH24:MI') 
				    AND a.R_TIME >= TO_DATE(''||#eateryDate:VARCHAR#||' 7:30', 'YYYY-MM-DD HH24:MI')
				   AND a.R_TIME <= TO_DATE(''||#eateryDate:VARCHAR#||' 9:20', 'YYYY-MM-DD HH24:MI') 
				   
				  ) 
              ) t order by t.deptname,t.eaterytime
		]]>
		
	</select>
	
	<select id="gmVegetableByTypeAndDate" parameterClass="SimpleMap"
		resultClass="SimpleMap">
		<![CDATA[
			select g.veget_id, g.veget_name
			  from gm_menu t, gm_vegetable g
			 where t.veget_id = g.veget_id and
			       T.CPNY_ID = #cpnyId:VARCHAR#
			   
		]]>
		<isNotEmpty prepend="AND" property="REPAST_DATE">
			<![CDATA[
				 to_char(t.menu_date, 'yyyy-MM-dd') = #REPAST_DATE:VARCHAR#
			]]>
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="MENU_EATTYPE">
			<![CDATA[
				t.menu_eattype= #MENU_EATTYPE:VARCHAR#
			]]>
		</isNotEmpty>
	</select>
	
	<select id="gmMenuViewCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			SELECT COUNT(*) FROM gm_menu WHERE CPNY_ID = #cpnyId:VARCHAR#
		]]>
	</select>
	
	<select id="gmVegetableViewCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			SELECT COUNT(*) FROM gm_vegetable WHERE CPNY_ID = #cpnyId:VARCHAR#
		]]>
	</select>
	
	<select id="gmVegetableOpinionViewCount" parameterClass="SimpleMap"
		resultClass="int">
		<![CDATA[
			SELECT COUNT(*) 
	        from gm_vegetable_opinion t, gm_vegetable g, sy_code s,hr_employee h ,hr_department d,gm_menu m
	       where t.veget_id = g.veget_id and 
	             t.repast_date = m.menu_date and
	             t.menu_eattype = m.menu_eattype and
	             t.veget_id = m.veget_id and 
	             t.menu_eattype = s.code_id and
	             t.CREATE_BY = h.person_id and h.deptid = d.deptid
	             and T.CPNY_ID = #cpnyId:VARCHAR#
		]]>
	</select>
</sqlMap>