/* Generated by Together */

package com.ait.evs;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;

import com.ait.evs.command.RetrieveEvaluateCmd;
import com.ait.util.DataAccessException;
import com.ait.util.ServiceLocator;
import com.ait.util.ServiceLocatorException;
import com.ait.util.SqlUtil;
import com.ait.util.StringUtil;

public class EvsMaster implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static ServiceLocator services;

	public EvsMaster() {
		try {
			services = ServiceLocator.getInstance();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getEvPeroidID() {
		return evPeroidID;
	}

	public void setEvPeroidID(String evPeroidID) {
		this.evPeroidID = evPeroidID;
	}

	public String getEvEmpID() {
		return evEmpID;
	}

	public void setEvEmpID(String evEmpID) {
		this.evEmpID = evEmpID;
	}

	public String getEvEmpName() {
		return evEmpName;
	}

	public void setEvEmpName(String evEmpName) {
		this.evEmpName = evEmpName;
	}

	public String getEvProcessID() {
		return evProcessID;
	}

	public void setEvProcessID(String evProcessID) {
		this.evProcessID = evProcessID;
	}

	public String getEvProcessName() {
		return evProcessName;
	}

	public void setEvProcessName(String evProcessName) {
		this.evProcessName = evProcessName;
	}

	public String getEvMaster() {
		return evMaster;
	}

	public void setEvMaster(String evMaster) {
		this.evMaster = evMaster;
	}

	public String getEvMasterName() {
		return evMasterName;
	}

	public void setEvMasterName(String evMasterName) {
		this.evMasterName = evMasterName;
	}

	public int getEvAppendable() {
		return evAppendable;
	}

	public void setEvAppendable(int evAppendable) {
		this.evAppendable = evAppendable;
	}

	public String getEvAppendValue() {
		return evAppendValue;
	}

	public void setEvAppendValue(String evAppendValue) {
		this.evAppendValue = evAppendValue;
	}

	public String getEvAppendName() {
		return evAppendName;
	}

	public void setEvAppendName(String evAppendName) {
		this.evAppendName = evAppendName;
	}

	public float getEvAppendDefault() {
		return evAppendDefault;
	}

	public void setEvAppendDefault(float evAppendDefault) {
		this.evAppendDefault = evAppendDefault;
	}

	public float getEvAppend() {
		return evAppend;
	}

	public void setEvAppend(float evAppend) {
		this.evAppend = evAppend;
	}

	public String getEvAppendReason() {
		return evAppendReason;
	}

	public void setEvAppendReason(String evAppendReason) {
		this.evAppendReason = evAppendReason;
	}

	public int getEvSubmitted() {
		return evSubmitted;
	}

	public void setEvSubmitted(int evSubmitted) {
		this.evSubmitted = evSubmitted;
	}

	private final static String GET_EVSMASTER_BY_EVSEMP = "SELECT /* INDEX (evs_master  idx_evs_master) */ * FROM evs_master_v1 "
			+ " WHERE ev_emp_id=? AND ev_period_id=?  ORDER BY ev_process_order ";

	/**
	 * 根据被评价者工号与评价期间取得相应评价者列表
	 * 
	 * @param evEmpId
	 * @param evPeriodId
	 * @return
	 * @throws DataAccessException
	 */
	public static List getEvsMasterByEvsEmp(String evEmpId, String evPeriodId)
			throws DataAccessException {
		List levsMaster = new Vector();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		try {
			con = ServiceLocator.getInstance().getConnection();
			pstmt = con.prepareStatement(GET_EVSMASTER_BY_EVSEMP);
			pstmt.setString(1, evEmpId);
			pstmt.setString(2, evPeriodId);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				EvsMaster evsMaster = new EvsMaster();
				evsMaster.setEvEmpID(rs.getString("ev_emp_id"));
				evsMaster.setEvEmpID1(rs.getString("ev_emp_id1"));
				evsMaster.setEvEmpName(rs.getString("ev_emp_name"));
				evsMaster.setEvMaster(rs.getString("ev_master"));
				evsMaster.setEvMaster1(rs.getString("ev_master1"));
				evsMaster.setEvMasterName(rs.getString("ev_master_name"));
				evsMaster.setEvProcessID(rs.getString("ev_process_id"));
				evsMaster.setEvProcessName(rs.getString("ev_process_name"));
				levsMaster.add(evsMaster);
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvsMasterByEvsEmp statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvsMasterByEvsEmp statistics",
					sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return levsMaster;
	}
	/**
	 * 获取导出权限 拥有人
	 * 
	 * @param evEmpId
	 * @param evPeriodId
	 * @return
	 * @throws DataAccessException
	 */
	public  List getEvsPersonDaochu(String codeflag)
			throws DataAccessException {
		List levsMaster = new Vector();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		String periodSql="";
		if(!"".equals(codeflag)){
		    periodSql=" AND  CODE_FLAG='"+codeflag+"'";
		}
		StringBuffer sql=new StringBuffer();
		sql.append(" SELECT PARENT_CODE,CODE_NAME FROM EVS_CODE ");
		sql.append(" WHERE STATUS ='1' AND DEPTH='1' ");
		sql.append(periodSql);
		try {
			con = ServiceLocator.getInstance().getConnection();
			Logger.getLogger(this.getClass()).debug(sql.toString());
			pstmt = con.prepareStatement(sql.toString());
			rs = pstmt.executeQuery();

			while (rs.next()) {
				EvsMaster evsMaster = new EvsMaster();
				evsMaster.setEvMaster(rs.getString("PARENT_CODE"));
				evsMaster.setEvMasterName(rs.getString("CODE_NAME"));
				levsMaster.add(evsMaster);
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvsMasterByEvsProcess statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvsMasterByEvsProcess statistics",
					sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return levsMaster;
	}
	public  List getEvsPersonYoujian(String codeflag)
		throws DataAccessException {
		List levsMaster = new Vector();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		String periodSql="";
		if(!"".equals(codeflag)){
		    periodSql=" AND  CODE_FLAG='"+codeflag+"'";
		}
		StringBuffer sql=new StringBuffer();
		sql.append(" SELECT PARENT_CODE,CODE_NAME FROM EVS_CODE ");
		sql.append(" WHERE STATUS ='1' AND DEPTH='2' ");
		sql.append(periodSql);
		try {
			con = ServiceLocator.getInstance().getConnection();
			Logger.getLogger(this.getClass()).debug(sql.toString());
			pstmt = con.prepareStatement(sql.toString());
			rs = pstmt.executeQuery();
		
			while (rs.next()) {
				EvsMaster evsMaster = new EvsMaster();
				evsMaster.setEvMaster(rs.getString("PARENT_CODE"));
				evsMaster.setEvMasterName(rs.getString("CODE_NAME"));
				levsMaster.add(evsMaster);
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvsMasterByEvsProcess statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvsMasterByEvsProcess statistics",
					sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return levsMaster;
	}
	/**
	 * 根据被评价流程与评价期间取得相应评价者列表
	 * 
	 * @param evEmpId
	 * @param evPeriodId
	 * @return
	 * @throws DataAccessException
	 */
	public  List getEvsMasterByEvsProcess(String evProcessId, String evPeriodId)
			throws DataAccessException {
		List levsMaster = new Vector();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		String periodSql="";
		if(!"".equals(evPeriodId)){
		    periodSql=" AND  ev_period_id='"+evPeriodId+"'";
		}
		StringBuffer sql=new StringBuffer();
		sql.append(" SELECT DISTINCT EV_MASTER,EV_MASTER_NAME FROM evs_master_v ");
		sql.append(" WHERE ev_process_id=? ");
		sql.append(periodSql);
		try {
			con = ServiceLocator.getInstance().getConnection();
			Logger.getLogger(this.getClass()).debug(sql.toString());
			pstmt = con.prepareStatement(sql.toString());
			pstmt.setString(1, evProcessId);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				EvsMaster evsMaster = new EvsMaster();
				evsMaster.setEvMaster(rs.getString("ev_master"));
				evsMaster.setEvMasterName(rs.getString("ev_master_name"));
				levsMaster.add(evsMaster);
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvsMasterByEvsProcess statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvsMasterByEvsProcess statistics",
					sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return levsMaster;
	}


	private final static String ADD_EVSMASTER = "INSERT INTO evs_master("
			+ "ev_period_id,ev_process_id,ev_emp_id,ev_master,ev_submitted) "
			+ " VALUES(?,?,?,?,0)";

	/**
	 * 为相应被评价者添加各个流程的评价者
	 * 
	 * @param lEvsMaster
	 * @param con
	 * @throws DataAccessException
	 */
	public void addEvsMaster(List lEvsMaster, Connection con)
			throws DataAccessException {

		if (lEvsMaster != null) {
			int lEvsMasterSize = lEvsMaster.size();
			for (int i = 0; i < lEvsMasterSize; i++) {
				EvsMaster evsMaster = (EvsMaster) lEvsMaster.get(i);
				// pstmt = null;
				// pstmt = con.prepareStatement(ADD_EVSMASTER);
				// pstmt.setString(1, evsMaster.getEvPeroidID());
				// pstmt.setString(2, evsMaster.getEvProcessID());
				// pstmt.setString(3, evsMaster.getEvEmpID());
				// pstmt.setString(4,
				// StringUtil.checkNull(evsMaster.getEvMaster()));
				//                
				// pstmt.executeUpdate();
				this.updateEvsMasterByEvsEmp(StringUtil.checkNull(evsMaster
						.getEvMaster()), evsMaster.getEvEmpID(), evsMaster
						.getEvPeroidID(), evsMaster.getEvProcessID(), con);
			}
		}
	}

	/**
	 * 为相应被评价者添加各个流程的评价者
	 * 
	 * @param lEvsMaster
	 * @param con
	 * @throws DataAccessException
	 */
	public void addEvsMaster1(List lEvsMaster,String cpnyid, Connection con)
			throws DataAccessException {

		if (lEvsMaster != null) {
			int lEvsMasterSize = lEvsMaster.size();
			for (int i = 0; i < lEvsMasterSize; i++) {
				EvsMaster evsMaster = (EvsMaster) lEvsMaster.get(i);
				// pstmt = null;
				// pstmt = con.prepareStatement(ADD_EVSMASTER);
				// pstmt.setString(1, evsMaster.getEvPeroidID());
				// pstmt.setString(2, evsMaster.getEvProcessID());
				// pstmt.setString(3, evsMaster.getEvEmpID());
				// pstmt.setString(4,
				// StringUtil.checkNull(evsMaster.getEvMaster()));
				//                
				// pstmt.executeUpdate();
				this.updateEvsMasterByEvsEmp1(StringUtil.checkNull(evsMaster
						.getEvMaster()), evsMaster.getEvEmpID(), evsMaster
						.getEvPeroidID(), evsMaster.getEvProcessID(), cpnyid, con);
			}
		}
	}
	
	private final static String UPDATE_EVSMASTER_BY_EVSEMP = "UPDATE evs_master SET"
			+ " ev_master=? WHERE ev_period_id=? AND ev_emp_id=? AND ev_process_id=? ";

	/**
	 * 更新相应被评价者相应评价期间及评价流程的评价者
	 * 
	 * @param evMaster
	 * @param evEmpId
	 * @param evPeriodId
	 * @param evProcessId
	 * @throws DataAccessException
	 */
	public void updateEvsMasterByEvsEmp(String evMaster, String evEmpId,
			String evPeriodId, String evProcessId) throws DataAccessException {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String SELECT_SQL = "SELECT * FROM evs_master WHERE ev_period_id=? AND ev_emp_id=? AND ev_process_id=?";
		try {
			con = services.getConnection();
			pstmt = con.prepareStatement(SELECT_SQL);

			pstmt.setString(1, evPeriodId);
			pstmt.setString(2, evEmpId);
			pstmt.setString(3, evProcessId);
			rs = pstmt.executeQuery();
			pstmt = null;
			if (rs.next()) {
				pstmt = con.prepareStatement(UPDATE_EVSMASTER_BY_EVSEMP);
				if (!evEmpId.equals("") && !evPeriodId.equals("")
						&& !evProcessId.equals("")) {
					pstmt.setString(1, evMaster);
					pstmt.setString(2, evPeriodId);
					pstmt.setString(3, evEmpId);
					pstmt.setString(4, evProcessId);
					pstmt.executeUpdate();
				}
			} else {
				pstmt = con.prepareStatement(ADD_EVSMASTER);
				if (!evEmpId.equals("") && !evPeriodId.equals("")
						&& !evProcessId.equals("")) {
					pstmt.setString(1, evPeriodId);
					pstmt.setString(2, evProcessId);
					pstmt.setString(3, evEmpId);
					pstmt.setString(4, evMaster);
					pstmt.executeUpdate();
				}
			}

		} catch (SQLException sqle) {

			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for updateEvsMasterByEvsEmp statistics",
					sqle);
		} catch (ServiceLocatorException sle) {

			throw new DataAccessException(
					"cant get connection for updateEvsMasterByEvsEmp statistics",
					sle);
		} finally {
			SqlUtil.close(pstmt, con);
		}

	}

	/**
	 * 更新相应被评价者相应评价期间及评价流程的评价者
	 * 
	 * @param evMaster
	 * @param evEmpId
	 * @param evPeriodId
	 * @param evProcessId
	 * @throws DataAccessException
	 */
	public void updateEvsMasterByEvsEmp(String evMaster, String evEmpId,
			String evPeriodId, String evProcessId,Connection con)
			throws DataAccessException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String SELECT_SQL = "SELECT * FROM evs_master WHERE ev_period_id=? AND ev_emp_id=? AND ev_process_id=?";
		try {
			pstmt = con.prepareStatement(SELECT_SQL);
			pstmt.setString(1, evPeriodId);
			pstmt.setString(2, evEmpId);
			pstmt.setString(3, evProcessId);
			rs = pstmt.executeQuery();
			pstmt = null;
			if (rs.next()) {
				pstmt = con.prepareStatement(UPDATE_EVSMASTER_BY_EVSEMP);
				if (!evEmpId.equals("") && !evPeriodId.equals("")
						&& !evProcessId.equals("")) {
					pstmt.setString(1, evMaster); 
					pstmt.setString(3, evPeriodId);
					pstmt.setString(4, evEmpId);
					pstmt.setString(5, evProcessId);
					pstmt.executeUpdate();
				}
			} else {
				pstmt = con.prepareStatement(ADD_EVSMASTER);
				if (!evEmpId.equals("") && !evPeriodId.equals("")
						&& !evProcessId.equals("")) {
					pstmt.setString(1, evPeriodId);
					pstmt.setString(2, evProcessId);
					pstmt.setString(3, evEmpId);
					pstmt.setString(4, evMaster);
					pstmt.executeUpdate();
				}
			}

		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for updateEvsMasterByEvsEmp statistics",
					sqle);
		} finally {
			SqlUtil.close(rs, pstmt);
		}

	}

	/**
	 * 更新相应被评价者相应评价期间及评价流程的评价者
	 * 
	 * @param evMaster
	 * @param evEmpId
	 * @param evPeriodId
	 * @param evProcessId
	 * @throws DataAccessException
	 */
	public void updateEvsMasterByEvsEmp1(String evMaster, String evEmpId,
			String evPeriodId, String evProcessId, String cpnyid,Connection con)
			throws DataAccessException {
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String SELECT_SQL = "SELECT * FROM evs_master WHERE ev_period_id=? AND ev_emp_id=? AND ev_process_id=?";
		try {
			pstmt = con.prepareStatement(SELECT_SQL);
			pstmt.setString(1, evPeriodId);
			pstmt.setString(2, evEmpId);
			pstmt.setString(3, evProcessId);
			rs = pstmt.executeQuery();
			pstmt = null;
			if (rs.next()) {
				pstmt = con.prepareStatement(UPDATE_EVSMASTER_BY_EVSEMP);
				if (!evEmpId.equals("") && !evPeriodId.equals("")
						&& !evProcessId.equals("")) {
					pstmt.setString(1, evMaster); 
					pstmt.setString(2, evPeriodId);
					pstmt.setString(3, evEmpId); 
					pstmt.setString(4, evProcessId);
					pstmt.executeUpdate();
				}
			} else {
				pstmt = con.prepareStatement(ADD_EVSMASTER);
				if (!evEmpId.equals("") && !evPeriodId.equals("")
						&& !evProcessId.equals("")) {
					pstmt.setString(1, evPeriodId);
					pstmt.setString(2, evProcessId);
					pstmt.setString(3, evEmpId); 
					pstmt.setString(4, evMaster); 
					pstmt.executeUpdate();
				}
			}

		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for updateEvsMasterByEvsEmp statistics",
					sqle);
		}catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt);
		}

	}
	
	public static Vector getEmpList(String deptid) throws DataAccessException {
		String deptsql = "";
		if (!deptid.equals("")) {

			deptsql = " AND deptid  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptid + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		String sql = "select empid,chinesename from hr_employee where empid is not null "
				+ deptsql
				+ " and join_type_code<>'tempWorker' and join_type_code<>'practise' and status_code<>'Status03' order by empid";

		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Vector v = new Vector();
		try {
			con = ServiceLocator.getInstance().getConnection();
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				Hashtable h = new Hashtable();
				h.put("EmpID", rs.getString("empid"));
				h.put("EmpName", rs.getString("chinesename"));
				v.add(h);
			}
			return v;
		} catch (SQLException sqle) {

			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEmpList statistics", sqle);
		} catch (ServiceLocatorException sle) {

			throw new DataAccessException(
					"cant get connection for getEmpList statistics", sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
	}

	/**
	 * 评价进行中的评价
	 * @param period
	 * @param master
	 * @param deptID
	 * @return
	 * @throws DataAccessException
	 */
	@SuppressWarnings("unchecked")
	public Vector getEvEmpsByMaster(String period, String master, String deptID)
			throws DataAccessException {
		String deptSql = "";
		if (deptID.trim().length() != 0)
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		if (period.trim().length() != 0)
			deptSql = " AND EV_PERIOD_ID ='"	+ period + "' ";
		if (master.trim().length() != 0)
			deptSql = " AND EV_EMP_NAME like '%"  + master + "%' ";
		String sql = "select * from EVS_MASTER_EMP_V1 where 1=1  "
				 + deptSql + "order by ev_emp_id desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Vector v = new Vector();
		try {
			con = ServiceLocator.getInstance().getConnection();
			ps = con.prepareStatement(sql);
			//ps.setString(1, period);
			//ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				Hashtable h = new Hashtable();
				h.put("EmpID", StringUtil.checkNull(rs.getString("ev_emp_id")));
				h.put("EmpID1", StringUtil.checkNull(rs.getString("ev_emp_id1")));
				h.put("EmpName", StringUtil.checkNull(rs.getString("ev_emp_name")));
				
				h.put("SecondDept", StringUtil.checkNull(rs.getString("SECONDDEPT")));
				h.put("ThirdDept", StringUtil.checkNull(rs.getString("THIRDDEPT")));
				h.put("FourthDept", StringUtil.checkNull(rs.getString("FOURTHDEPT")));
				h.put("FifthDept", StringUtil.checkNull(rs.getString("FIFTHDEPT")));
				h.put("SixthlyDept", StringUtil.checkNull(rs.getString("SIXTHDEPT")));
				
				h.put("DeptName", StringUtil.checkNull(rs.getString("ev_dept_name")));
				h.put("ProcessName", StringUtil.checkNull(rs.getString("current_process_name")));
				h.put("Operatable", StringUtil.checkNull(rs.getString("operatable")));
				h.put("Mark", (rs.getFloat("ev_mark") + ""));
				h.put("EvGradeId", StringUtil.checkNull(rs.getString("ev_grade_id")));
				h.put("EvGradeName",StringUtil.checkNull(rs.getString("ev_grade_name")));
				h.put("EvTypeId",StringUtil.checkNull(rs.getString("ev_type_id")));
				h.put("EvTypeName",StringUtil.checkNull(rs.getString("ev_type_name")));
				//h.put("OperateId",StringUtil.checkNull(rs.getString("current_operate_id")));
				v.add(h);
			}
			return v;
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMaster statistics", sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMaster statistics", sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}

	}

	// 取出相应可以相评价者下所以被评价者包括自己
	public Vector getEvEmpsByMaster(String period, String master,
			String deptID, String evTypeID) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		if (!"".equals(evTypeID)) {
			typeSql = " AND ev_type_id='" + evTypeID + "'";
		}
		if (deptID.trim().length() != 0)
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		String sql = "select * from EVS_MASTER_EMP_V2 where EV_PERIOD_ID = ? and "
				+ " EV_MASTER = ?"
				+ deptSql
				+ typeSql
				+ "order by operatable DESC,NVL(ev_mark,0) DESC ,ev_emp_id";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Vector v = new Vector();
		try {
			con = ServiceLocator.getInstance().getConnection();
			ps = con.prepareStatement(sql);
			ps.setString(1, period);
			ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				Hashtable h = new Hashtable();
				h.put("EmpID", rs.getString("ev_emp_id"));
				h.put("EmpName", rs.getString("ev_emp_name"));
				h.put("DeptName", rs.getString("ev_dept_name"));
				h.put("ProcessName", rs.getString("current_process_name"));
				h.put("Operatable", rs.getString("operatable"));
				h.put("Mark", (rs.getFloat("ev_mark") + ""));
				h.put("EvGradeId", (rs.getString("ev_grade_id") != null) ? rs
						.getString("ev_grade_id") : "");
				h.put("EvGradeName",
						(rs.getString("ev_grade_name") != null) ? rs
								.getString("ev_grade_name") : "");
				h.put("OperateId",
						(rs.getString("current_operate_id") != null) ? rs
								.getString("current_operate_id") : "");
				v.add(h);
			}
			return v;
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMaster statistics", sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMaster statistics", sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}

	}

	// 取出相应可以相评价者下所以被评价者包括自己
	public Vector getEvEmpsByMaster(String period, String master,
			String deptID, String evTypeID, String evProcessId)
			throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		String processSql = "";
		if (!"".equals(evTypeID)) {
			String temp[]= evTypeID.split(",");
			typeSql = " AND (";
			for(int i=0;i<temp.length;i++){
				typeSql += " ev_type_id='" + temp[i] + "'";
				if(i == temp.length -1){
					typeSql += " ) ";
				} else {
					typeSql += " OR ";
				}
			}
		}
		if (!"".equals(evProcessId)) {
			processSql = " AND current_process_id='" + evProcessId + "'";
		}
		if (deptID.trim().length() != 0)
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		String sql = "select * from EVS_MASTER_EMP_V2 where EV_PERIOD_ID = ? and "
				+ " EV_MASTER = ?"
				+ deptSql
				+ typeSql
				+ processSql
				+ "order by operatable DESC,NVL(ev_mark,0) DESC ,ev_emp_id";
		
		Logger.getLogger(EvsMaster.class).debug("get evaluate employee list sql : " + sql);
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Vector v = new Vector();
		try {
			con = ServiceLocator.getInstance().getConnection();
			ps = con.prepareStatement(sql);
			ps.setString(1, period);
			ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				Hashtable h = new Hashtable();
				h.put("EmpID", rs.getString("ev_emp_id"));
				h.put("EmpName", rs.getString("ev_emp_name"));
				h.put("DeptName", rs.getString("ev_dept_name"));
				h.put("ProcessName", rs.getString("current_process_name"));
				h.put("EvTypeId", rs.getString("ev_type_id"));
				h.put("EvTypeName", rs.getString("ev_type_name"));
				h.put("Operatable", rs.getString("operatable"));
				h.put("Mark", (rs.getFloat("ev_mark") + ""));
				h.put("EvGradeId", (rs.getString("ev_grade_id") != null) ? rs
						.getString("ev_grade_id") : "");
				h.put("EvGradeName",
						(rs.getString("ev_grade_name") != null) ? rs
								.getString("ev_grade_name") : "");
				h.put("OperateId",
						(rs.getString("current_operate_id") != null) ? rs
								.getString("current_operate_id") : "");
				v.add(h);
			}
			return v;
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMaster statistics", sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMaster statistics", sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}

	}

	public List getEvEmpsByMasterPeriod(String period, String master,
			String deptID, String evTypeId) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";

		if (!deptID.trim().equals("")) {
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		if (evTypeId.trim().length() != 0)
			typeSql = " and EV_TYPE_ID = '" + evTypeId + "'";
		String sql = "select * from EVS_MASTER_EMP_V where EV_PERIOD_ID = ? and "
				+ " EV_MASTER = ?"
				+ deptSql
				+ typeSql
				+ "order by OPERATABLE desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);
			ps.setString(1, period);
			ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp
						.setEvCurrentProcessID(rs
								.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs
						.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}

	// 取得相应评价者下所有被评价人员列表
	public List getEvEmpsByMasterPeriod(String period, String master,
			String deptID, String evTypeId, String evProcessId)
			throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		String processSql = "";
		if (!deptID.trim().equals("")) {
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		if (evTypeId.trim().length() != 0)
			typeSql = " and EV_TYPE_ID = '" + evTypeId + "'";

		if (evProcessId.trim().length() != 0)
			processSql = " and current_process_id = '" + evProcessId + "'";
		String sql = "select * from EVS_MASTER_EMP_V where EV_PERIOD_ID = ? and "
				+ " EV_MASTER = ?"
				+ deptSql
				+ typeSql
				+ processSql
				+ "order by OPERATABLE desc";
		
		Logger.getLogger(EvsMaster.class).debug("get evs employee sql : " + sql);
		Logger.getLogger(EvsMaster.class).debug("EV_PERIOD_ID : " + period);
		Logger.getLogger(EvsMaster.class).debug("EV_MASTER : " + master);
		
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);
			ps.setString(1, period);
			ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp
						.setEvCurrentProcessID(rs
								.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs
						.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}

	// 取得相应评价者下所有被评价人员列表
	public List getEvEmpsByMasterPeriod(String period, String master,
			String deptID) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		String processSql = "";
		if (!deptID.trim().equals("")) {
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		String sql = "select * from EVS_MASTER_EMP_V where EV_PERIOD_ID = ? and "
				+ " EV_MASTER = ?"
				+ deptSql
				+ typeSql
				+ processSql
				+ "order by ev_emp_id ";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);
			ps.setString(1, period);
			ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp
						.setEvCurrentProcessID(rs
								.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs
						.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}

	// 取得相应评价者下可以操作所有被评价人员列表包括自己
	public List getEvEmpsByMasterPeriod(String period, String master,
			String deptID, String evTypeId, String evProcessId, int operatable)
			throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		String processSql = "";
		if (!deptID.trim().equals("")) {
			deptSql = " AND ev_dept_id  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
//		if (evTypeId.trim().length() != 0)
//			typeSql = " and EV_TYPE_ID = '" + evTypeId + "'";
		if (!"".equals(evTypeId)) {
			String temp[]= evTypeId.split(",");
			typeSql = " AND (";
			for(int i=0;i<temp.length;i++){
				typeSql += " EV_TYPE_ID='" + temp[i] + "'";
				if(i == temp.length -1){
					typeSql += " ) ";
				} else {
					typeSql += " OR ";
				}
			}
			}

		if (evProcessId.trim().length() != 0)
			processSql = " and current_process_id = '" + evProcessId + "'";
		String sql = "select * from EVS_MASTER_EMP_V2 where EV_PERIOD_ID = ? AND operatable=? AND "
				+ " EV_MASTER = ? "
				+ deptSql
				+ typeSql
				+ processSql
				+ "order by OPERATABLE desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);
			ps.setString(1, period);
			ps.setInt(2, operatable);
			ps.setString(3, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp
						.setEvCurrentProcessID(rs
								.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs
						.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}

	// 取得所以参与评价的员工的评价进行信息
	public List getAllEvEmpsByMasterPeriod(String period, String master,
			String deptID, String evTypeId) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";

		if (!deptID.trim().equals("")) {
			deptSql = " AND EVS_EMP.EV_DEPT_ID  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		if (evTypeId.trim().length() != 0)
			typeSql = " and EVS_EMP.EV_TYPE_ID = '" + evTypeId + "'";
		String VIEW_SQL = " SELECT DISTINCT	"
				+ "	EVS_MASTER.EV_PERIOD_ID as EV_PERIOD_ID,						"
				+ "	EVS_MASTER.EV_MASTER as EV_MASTER,								"
				+ "	EVS_EMP.EV_EMP_ID AS EV_EMP_ID,									"
				+ "	EVS_EMP.EV_EMP_NAME AS EV_EMP_NAME,								"
				+ "	EVS_EMP.EV_DEPT_ID AS EV_DEPT_ID,								"
				+ "	EVS_EMP.EV_DEPT_NAME AS EV_DEPT_NAME,							"
				+ "	EVS_EMP.EV_TYPE_ID AS EV_TYPE_ID,								"
				+ "	SC2.CODE_NAME AS EV_TYPE_NAME,									"
				+ "	EVS_EMP.EV_PROCESS_ID AS CURRENT_PROCESS_ID,					"
				+ "	SC1.CODE_NAME AS CURRENT_PROCESS_NAME,							"
				+ "	(CASE WHEN														"
				+ "		EVS_EMP.EV_PROCESS_ID IN (									"
				+ "			SELECT EV_PROCESS_ID FROM EVS_MASTER EM					"
				+ "				WHERE EM.EV_PERIOD_ID = EVS_EMP.EV_PERIOD_ID		"
				+ "					AND EM.EV_EMP_ID = EVS_EMP.EV_EMP_ID			"
				+ "					AND EM.EV_MASTER = EVS_MASTER.EV_MASTER)		"
				+ "		THEN (														"
				+ "		CASE WHEN													"
				+ "				(SELECT EV_PROCESS_SDATE FROM EVS_TYPE_PROCESS		"
				+ "					WHERE EV_PERIOD_ID = EVS_EMP.EV_PERIOD_ID		"
				+ "						AND EV_TYPE_ID = EVS_EMP.EV_TYPE_ID			"
				+ "						AND EV_PROCESS_ID = EVS_EMP.EV_PROCESS_ID) <= SYSDATE	"
				+ "				AND																"
				+ "				(SELECT EV_PROCESS_EDATE FROM EVS_TYPE_PROCESS					"
				+ "					WHERE EV_PERIOD_ID = EVS_EMP.EV_PERIOD_ID					"
				+ "						AND EV_TYPE_ID = EVS_EMP.EV_TYPE_ID						"
				+ "					AND EV_PROCESS_ID = EVS_EMP.EV_PROCESS_ID) >= SYSDATE		"
				+ "				THEN 1															" + "				ELSE 0															"
				+ "				END)															" + "		ELSE 0																	"
				+ "	END) OPERATABLE,															"
				+ "	EVS_EMP.EV_MARK AS EV_MARK ,												"
				+ "	EVS_EMP.ev_grade_id AS EV_GRADE_ID,											"
				+ "	sc3.code_name  AS ev_grade_name												"
				+ " FROM EVS_MASTER																"
				+ " INNER JOIN EVS_EMP															"
				+ "	ON EVS_MASTER.EV_PERIOD_ID = EVS_EMP.EV_PERIOD_ID							"
				+ "	AND EVS_MASTER.EV_EMP_ID = EVS_EMP.EV_EMP_ID								"
				+ " INNER JOIN SY_CODE SC1														"
				+ "	ON SC1.CODE_ID = EVS_EMP.EV_PROCESS_ID										"
				+ " 	AND SC1.PARENT_CODE = 'EVPROCESS'											"
				+ " LEFT JOIN SY_CODE SC3														"
				+ "	  ON SC3.CODE_ID = EVS_EMP.EV_GRADE_ID										"
				+ "	  AND SC3.PARENT_CODE = 'EVEMPGRADE'										"
				+ " LEFT JOIN SY_CODE SC2														"
				+ "	  ON SC2.CODE_ID = EVS_EMP.EV_TYPE_ID										"
				+ "	  AND SC2.PARENT_CODE = 'EVSTYPE'				";

		String sql = VIEW_SQL + " WHERE EVS_MASTER.EV_PERIOD_ID = ? AND "
				+ " EVS_MASTER.EV_MASTER = ? " + deptSql + typeSql
				+ "order by OPERATABLE desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);

			ps.setString(1, period);
			ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp
						.setEvCurrentProcessID(rs
								.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs
						.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}

	
	// 取得所以参与评价的员工的评价进行信息2
	public List getAllEvEmpsByMasterPeriod2(String evPeriodId,String period, String master,
			String deptID, String craft,String line,String jobcontent, String zyzgdj,
			String gxjndj, String sumstoref, String sumstoret,
			String deptke, String deptzhi, String deptzu) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		
		
		if (!deptID.trim().equals("")) {
			deptSql = " AND h.deptid  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		if (craft.trim().length() != 0)
			typeSql = " and r.CRAFT = '" + craft + "'";
		
		String VIEW_SQL = "SELECT r.EV_PERIOD_ID as EV_PERIOD_ID, " +
				"'' as EV_MASTER," +
				" r.evs_empid ," +
				" H.EMPID AS EV_EMP_ID," +
				"H.CHINESENAME AS EV_EMP_NAME," +
				"H.DEPTID AS EV_DEPT_ID," +
				"t.deptname AS EV_DEPT_NAME," +
				"'' AS EV_TYPE_ID, " +
				"'' AS EV_TYPE_NAME, " +
				"'' AS CURRENT_PROCESS_ID, " +
				"'' AS CURRENT_PROCESS_NAME, " +
				"'' AS OPERATABLE, " +
                "'' AS EV_MARK, " +
                "'' AS EV_GRADE_ID, " +
                "t.deptfullname  AS ev_grade_name, " +
                "r.setupcodeno, " +
                " r.CRAFT, " +
                "r.SKILLTYPE, " +
                " r.LINE, " +
                "r.AIRCRAFT, " +
                "r.PROCESS," +
                "r.JOBCONTENT, " +
                " r.TYPEOPERATION, " +
                
                "r.DEPTKE, " +
                "r.DEPTZHI," +
                "r.DEPTZU, " +
                " r.ZYZGDJLEVEL, " +
                " r.SUMJCCOUNT, " + 
                " r.SUMSCORE, " +
                
                "r.proficiency AS PROFICIENCY," + 
                "r.sheopercyq AS SHEOPERCYQ," + 
                "r.operationcom AS OPERATIONCOM," +
                "r.qualityofwork AS QUALITYOFWORK, " +
                "r.standardaction AS STANDARDACTION, " +
                "r.composite AS COMPOSITE, " +
                "r.SKILLLEVEL , " +
                "r.QUALIFICATION, " +
                "r.skillscore AS SKILLSCORE, " +
                "r.PURPOSE, " +
                "r.remark AS REMARK " +

  "FROM hr_employee H, " +
  "     hr_department t, " +
      " evs_setupcode r " +
 "where H.PERSON_ID = r.evs_empid " +
   "and h.deptid = t.deptid  " +
   "and h.status_code !='EmpStatus3'  " ;
		if (!evPeriodId.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.EV_PERIOD_ID  >='"	+ evPeriodId + "' ";
		}
		if (!period.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.EV_PERIOD_ID  <='"	+ period + "' ";
		}
		if (!master.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  (H.CHINESENAME  like '%"	+ master + "%' or h.empid like '%"+ master + "%') ";
		}
		if (!deptke.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.deptke  like '%"	+ deptke + "%' ";
		}
		if (!deptzhi.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.deptzhi  like '%"	+ deptzhi + "%' ";
		}
		if (!deptzu.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.deptzu  like '%"	+ deptzu + "%' ";
		}
		if (!line.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.line  ='"	+ line + "' ";
		}
		if (!jobcontent.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.jobcontent  ='"	+ jobcontent + "' ";
		}
		if (!zyzgdj.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.zyzgdj  ='"	+ zyzgdj + "' ";
		}
		if (!gxjndj.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.gxjndj  ='"	+ gxjndj + "' ";
		}
		if (!sumstoref.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.sumstore  >='"	+ sumstoref + "' ";
		}
		if (!sumstoret.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.sumscore  <='"	+ sumstoret + "' ";
		}
		
		String sql = VIEW_SQL + deptSql + typeSql 
				+ "  order by  h.empid,OPERATABLE desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);

			//ps.setString(1, period);
			//ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp.setEVS_EMPID(rs.getString("evs_empid"));
				evsEmp.setSETUPCODENO(rs.getString("setupcodeno"));
				evsEmp.setEvCurrentProcessID(rs.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				evsEmp.setCRAFT(rs.getString("CRAFT"));
			    evsEmp.setSKILLTYPE(rs.getString("SKILLTYPE"));
			    evsEmp.setLINE(rs.getString("LINE"));
			    evsEmp.setAIRCRAFT(rs.getString("AIRCRAFT"));
			    evsEmp.setPROCESS(rs.getString("PROCESS"));
			    evsEmp.setJOBCONTENT(rs.getString("JOBCONTENT"));
			    evsEmp.setTYPEOPERATION(rs.getString("TYPEOPERATION"));
			    evsEmp.setQUALIFICATION(rs.getString("QUALIFICATION"));
			    evsEmp.setSKILLSCORE(rs.getString("SKILLSCORE"));
			    evsEmp.setPURPOSE(rs.getString("PURPOSE"));
			    evsEmp.setPROFICIENCY(rs.getString("PROFICIENCY"));
			    evsEmp.setSHEOPERCYQ(rs.getString("SHEOPERCYQ"));
			    evsEmp.setOPERATIONCOM(rs.getString("OPERATIONCOM"));
			    evsEmp.setQUALITYOFWORK(rs.getString("QUALITYOFWORK"));
			    evsEmp.setSTANDARDACTION(rs.getString("STANDARDACTION"));
			    evsEmp.setCOMPOSITE(rs.getString("COMPOSITE"));
			    evsEmp.setSKILLLEVEL(rs.getString("SKILLLEVEL"));
			    evsEmp.setREMARK(rs.getString("REMARK"));
			    evsEmp.setSUMSCORE(rs.getString("SUMSCORE"));
			    
			    evsEmp.setDeptke(rs.getString("DEPTKE"));
			    evsEmp.setDeptzhi(rs.getString("DEPTZHI"));
			    evsEmp.setDeptzu(rs.getString("DEPTZU"));
			    evsEmp.setZYZGDJLEVEL(rs.getString("ZYZGDJLEVEL"));
			    evsEmp.setSUMJCCOUNT(rs.getString("SUMJCCOUNT"));
			    
			    
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}
	// 取得所以参与评价的员工的评价进行信息2
	public List getAllEvEmpsByMasterPeriod2admin(String empID,String evPeriodId,String period, String master,
			String deptID, String craft,String line,String jobcontent, String zyzgdj,
			String gxjndj, String sumstoref, String sumstoret,
			String deptke, String deptzhi, String deptzu) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		if (!empID.trim().equals("")) {
			deptSql = " AND h.deptid  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " 
					+ " START WITH deptid = (select deptid from hr_employee where person_id='"
					+ empID + "' ) CONNECT  BY PRIOR deptid= parent_dept_id )";
		}
		
		/*if (!deptID.trim().equals("")) {
			deptSql = " AND h.deptid  in  (SELECT DISTINCT  "
					+ " deptid  FROM  HR_DEPARTMENT " + " START WITH deptid ='"
					+ deptID + "' CONNECT  BY PRIOR deptid= parent_dept_id )";
		}*/
		if (craft.trim().length() != 0)
			typeSql = " and r.CRAFT = '" + craft + "'";
		
		String VIEW_SQL = "SELECT r.EV_PERIOD_ID as EV_PERIOD_ID, " +
				"'' as EV_MASTER," +
				" r.evs_empid ," +
				" H.EMPID AS EV_EMP_ID," +
				"H.CHINESENAME AS EV_EMP_NAME," +
				"H.DEPTID AS EV_DEPT_ID," +
				"t.deptname AS EV_DEPT_NAME," +
				"'' AS EV_TYPE_ID, " +
				"'' AS EV_TYPE_NAME, " +
				"'' AS CURRENT_PROCESS_ID, " +
				"'' AS CURRENT_PROCESS_NAME, " +
				"'' AS OPERATABLE, " +
                "'' AS EV_MARK, " +
                "'' AS EV_GRADE_ID, " +
                "t.deptfullname  AS ev_grade_name, " +
                "r.setupcodeno, " +
                " r.CRAFT, " +
                "r.SKILLTYPE, " +
                " r.LINE, " +
                "r.AIRCRAFT, " +
                "r.PROCESS," +
                "r.JOBCONTENT, " +
                " r.TYPEOPERATION, " +
                
                "r.DEPTKE, " +
                "r.DEPTZHI," +
                "r.DEPTZU, " +
                " r.ZYZGDJLEVEL, " +
                " r.SUMJCCOUNT, " + 
                " r.SUMSCORE, " +
                
                "r.proficiency AS PROFICIENCY," + 
                "r.sheopercyq AS SHEOPERCYQ," + 
                "r.operationcom AS OPERATIONCOM," +
                "r.qualityofwork AS QUALITYOFWORK, " +
                "r.standardaction AS STANDARDACTION, " +
                "r.composite AS COMPOSITE, " +
                "r.SKILLLEVEL , " +
                "r.QUALIFICATION, " +
                "r.skillscore AS SKILLSCORE, " +
                "r.PURPOSE, " +
                "r.remark AS REMARK " +

  "FROM hr_employee H, " +
  "     hr_department t, " +
      " evs_setupcode r " +
 "where H.PERSON_ID = r.evs_empid " +
   "and h.deptid = t.deptid  " +
   "and h.status_code !='EmpStatus3'  " ;
		if (!evPeriodId.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.EV_PERIOD_ID  >='"	+ evPeriodId + "' ";
		}
		if (!period.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.EV_PERIOD_ID  <='"	+ period + "' ";
		}
		if (!master.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  (H.CHINESENAME  like '%"	+ master + "%' or h.empid like '%"+ master + "%') ";
		}
		if (!deptke.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.deptke  like '%"	+ deptke + "%' ";
		}
		if (!deptzhi.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.deptzhi  like '%"	+ deptzhi + "%' ";
		}
		if (!deptzu.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.deptzu  like '%"	+ deptzu + "%' ";
		}
		if (!line.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.line  ='"	+ line + "' ";
		}
		if (!jobcontent.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.jobcontent  ='"	+ jobcontent + "' ";
		}
		if (!zyzgdj.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.zyzgdj  ='"	+ zyzgdj + "' ";
		}
		if (!gxjndj.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.gxjndj  ='"	+ gxjndj + "' ";
		}
		if (!sumstoref.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.sumstore  >='"	+ sumstoref + "' ";
		}
		if (!sumstoret.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.sumscore  <='"	+ sumstoret + "' ";
		}
		
		String sql = VIEW_SQL + deptSql + typeSql 
				+ "  order by  h.empid,OPERATABLE desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);

			//ps.setString(1, period);
			//ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp.setEVS_EMPID(rs.getString("evs_empid"));
				evsEmp.setSETUPCODENO(rs.getString("setupcodeno"));
				evsEmp.setEvCurrentProcessID(rs.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				evsEmp.setCRAFT(rs.getString("CRAFT"));
			    evsEmp.setSKILLTYPE(rs.getString("SKILLTYPE"));
			    evsEmp.setLINE(rs.getString("LINE"));
			    evsEmp.setAIRCRAFT(rs.getString("AIRCRAFT"));
			    evsEmp.setPROCESS(rs.getString("PROCESS"));
			    evsEmp.setJOBCONTENT(rs.getString("JOBCONTENT"));
			    evsEmp.setTYPEOPERATION(rs.getString("TYPEOPERATION"));
			    evsEmp.setQUALIFICATION(rs.getString("QUALIFICATION"));
			    evsEmp.setSKILLSCORE(rs.getString("SKILLSCORE"));
			    evsEmp.setPURPOSE(rs.getString("PURPOSE"));
			    evsEmp.setPROFICIENCY(rs.getString("PROFICIENCY"));
			    evsEmp.setSHEOPERCYQ(rs.getString("SHEOPERCYQ"));
			    evsEmp.setOPERATIONCOM(rs.getString("OPERATIONCOM"));
			    evsEmp.setQUALITYOFWORK(rs.getString("QUALITYOFWORK"));
			    evsEmp.setSTANDARDACTION(rs.getString("STANDARDACTION"));
			    evsEmp.setCOMPOSITE(rs.getString("COMPOSITE"));
			    evsEmp.setSKILLLEVEL(rs.getString("SKILLLEVEL"));
			    evsEmp.setREMARK(rs.getString("REMARK"));
			    evsEmp.setSUMSCORE(rs.getString("SUMSCORE"));
			    
			    evsEmp.setDeptke(rs.getString("DEPTKE"));
			    evsEmp.setDeptzhi(rs.getString("DEPTZHI"));
			    evsEmp.setDeptzu(rs.getString("DEPTZU"));
			    evsEmp.setZYZGDJLEVEL(rs.getString("ZYZGDJLEVEL"));
			    evsEmp.setSUMJCCOUNT(rs.getString("SUMJCCOUNT"));
			    
			    
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}
	// 取得所以参与评价的员工的评价进行信息2
	public List getAllEvEmpsByMasterPeriod0302(String craft, String zyzgdj) throws DataAccessException {
		
		String VIEW_SQL = "SELECT r.EV_PERIOD_ID as EV_PERIOD_ID, " +
				"'' as EV_MASTER," +
				" r.evs_empid ," +
				" H.EMPID AS EV_EMP_ID," +
				"H.CHINESENAME AS EV_EMP_NAME," +
				"H.DEPTID AS EV_DEPT_ID," +
				"t.deptname AS EV_DEPT_NAME," +
				"'' AS EV_TYPE_ID, " +
				"'' AS EV_TYPE_NAME, " +
				"'' AS CURRENT_PROCESS_ID, " +
				"'' AS CURRENT_PROCESS_NAME, " +
				"'' AS OPERATABLE, " +
                "'' AS EV_MARK, " +
                "'' AS EV_GRADE_ID, " +
                "t.deptfullname  AS ev_grade_name, " +
                "r.setupcodeno, " +
                " r.CRAFT, " +
                "r.SKILLTYPE, " +
                " r.LINE, " +
                "r.AIRCRAFT, " +
                "r.PROCESS," +
                "r.JOBCONTENT, " +
                " r.TYPEOPERATION, " +
                "r.proficiency AS PROFICIENCY," + 
                "r.sheopercyq AS SHEOPERCYQ," + 
                "r.operationcom AS OPERATIONCOM," +
                "r.qualityofwork AS QUALITYOFWORK, " +
                "r.standardaction AS STANDARDACTION, " +
                "r.composite AS COMPOSITE, " +
                "r.SKILLLEVEL , " +
                "r.QUALIFICATION, " +
                "r.skillscore AS SKILLSCORE, " +
                "r.ZYZGDJLEVEL, " +
                "r.PURPOSE, " +
                "r.remark AS REMARK " +

			  "FROM hr_employee H, " +
			  "     hr_department t, " +
			      " evs_setupcode r " +
			 "where H.PERSON_ID = r.evs_empid " +
			   "and h.deptid = t.deptid" ;
		if (craft.trim().length() != 0) {
			VIEW_SQL = VIEW_SQL + " and r.CRAFT = '" + craft + "'";
		}
		if (!zyzgdj.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.ZYZGDJLEVEL  ='"	+ zyzgdj + "' ";
		}
		
		String sql = VIEW_SQL  
				+ "order by  h.empid,OPERATABLE desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);

			//ps.setString(1, period);
			//ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp.setEVS_EMPID(rs.getString("evs_empid"));
				evsEmp.setSETUPCODENO(rs.getString("setupcodeno"));
				evsEmp.setEvCurrentProcessID(rs.getString("current_process_id"));
				evsEmp.setEvCurrentProcessName(rs.getString("current_process_name"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setEvGradeID(rs.getString("ev_grade_id"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvMark(rs.getFloat("ev_mark"));
				evsEmp.setEvPeriodID(rs.getString("ev_period_id"));
				evsEmp.setEvTypeID(rs.getString("ev_type_id"));
				evsEmp.setEvTypeName(rs.getString("ev_type_name"));
				evsEmp.setCRAFT(rs.getString("CRAFT"));
			    evsEmp.setSKILLTYPE(rs.getString("SKILLTYPE"));
			    evsEmp.setLINE(rs.getString("LINE"));
			    evsEmp.setAIRCRAFT(rs.getString("AIRCRAFT"));
			    evsEmp.setPROCESS(rs.getString("PROCESS"));
			    evsEmp.setJOBCONTENT(rs.getString("JOBCONTENT"));
			    evsEmp.setTYPEOPERATION(rs.getString("TYPEOPERATION"));
			    evsEmp.setQUALIFICATION(rs.getString("QUALIFICATION"));
			    evsEmp.setSKILLSCORE(rs.getString("SKILLSCORE"));
			    evsEmp.setPURPOSE(rs.getString("PURPOSE"));
			    evsEmp.setPROFICIENCY(rs.getString("PROFICIENCY"));
			    evsEmp.setSHEOPERCYQ(rs.getString("SHEOPERCYQ"));
			    evsEmp.setOPERATIONCOM(rs.getString("OPERATIONCOM"));
			    evsEmp.setQUALITYOFWORK(rs.getString("QUALITYOFWORK"));
			    evsEmp.setSTANDARDACTION(rs.getString("STANDARDACTION"));
			    evsEmp.setCOMPOSITE(rs.getString("COMPOSITE"));
			    evsEmp.setSKILLLEVEL(rs.getString("SKILLLEVEL"));
			    evsEmp.setREMARK(rs.getString("REMARK"));
			    evsEmp.setZYZGDJLEVEL(rs.getString("ZYZGDJLEVEL"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}
	
public List getAllEvEmpsByMasterPeriod0305(String craft, String zyzgdj) throws DataAccessException {
		
		String VIEW_SQL = "SELECT  " +
				" r.evs_empid ," +
				" H.EMPID AS EV_EMP_ID," +
				"H.CHINESENAME AS EV_EMP_NAME," +
				"H.DEPTID AS EV_DEPT_ID," +
				"t.deptname AS EV_DEPT_NAME," +
                "t.deptfullname  AS ev_grade_name, " +
                " r.CRAFT, " +
                "r.SUMSCORE, " +
                "r.SUMJCCOUNT , " +
                "r.ZYZGDJLEVEL " +

			  "FROM hr_employee H, " +
			  "     hr_department t, " +
			      " (select evs_empid , CRAFT,MAX(ZYZGDJLEVEL) ZYZGDJLEVEL ,MAX(SUMSCORE) SUMSCORE,MAX(SUMJCCOUNT) SUMJCCOUNT "
			  	+ " FROM evs_setupcode  WHERE ZYZGDJLEVEL IS NOT NULL GROUP BY evs_empid , CRAFT) r " +
			 "where H.PERSON_ID = r.evs_empid " +
			   "and h.deptid = t.deptid " +
		        "and h.status_code !='EmpStatus3' " ;
		
		if (craft.trim().length() != 0) {
			VIEW_SQL = VIEW_SQL + " and r.CRAFT = '" + craft + "'";
		}
		if (!zyzgdj.trim().equals("")) {
			VIEW_SQL = VIEW_SQL + " and  R.ZYZGDJLEVEL  ='"	+ zyzgdj + "' ";
		}
		
		String sql = VIEW_SQL  	+ "order by  h.empid desc";
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		List lEvsEmp = new Vector();
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);

			//ps.setString(1, period);
			//ps.setString(2, master);
			rs = ps.executeQuery();
			while (rs.next()) {
				EvsEmp evsEmp = new EvsEmp();
				evsEmp.setEVS_EMPID(rs.getString("evs_empid"));
				evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
				evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
				evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
				evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
				evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
				evsEmp.setCRAFT(rs.getString("CRAFT"));
			    evsEmp.setSUMJCCOUNT(rs.getString("SUMJCCOUNT"));
			    evsEmp.setSUMSCORE(rs.getString("SUMSCORE"));
			    evsEmp.setZYZGDJLEVEL(rs.getString("ZYZGDJLEVEL"));
				lEvsEmp.add(evsEmp);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return lEvsEmp;

	}

public List getAllEvEmpsByMasterPeriod0305admin(String craft, String zyzgdj,String empID) throws DataAccessException {
	
	String VIEW_SQL = "SELECT  " +
			" r.evs_empid ," +
			" H.EMPID AS EV_EMP_ID," +
			"H.CHINESENAME AS EV_EMP_NAME," +
			"H.DEPTID AS EV_DEPT_ID," +
			"t.deptname AS EV_DEPT_NAME," +
            "t.deptfullname  AS ev_grade_name, " +
            " r.CRAFT, " +
            "r.SUMSCORE, " +
            "r.SUMJCCOUNT , " +
            "r.ZYZGDJLEVEL " +

		  "FROM hr_employee H, " +
		  "     hr_department t, " +
		      " (select evs_empid , CRAFT,MAX(ZYZGDJLEVEL) ZYZGDJLEVEL ,MAX(SUMSCORE) SUMSCORE,MAX(SUMJCCOUNT) SUMJCCOUNT "
		  	+ " FROM evs_setupcode  WHERE ZYZGDJLEVEL IS NOT NULL GROUP BY evs_empid , CRAFT) r " +
		 "where H.PERSON_ID = r.evs_empid " +
		   "and h.deptid = t.deptid " +
	        "and h.status_code !='EmpStatus3' " ;
	
	if (craft.trim().length() != 0) {
		VIEW_SQL = VIEW_SQL + " and r.CRAFT = '" + craft + "'";
	}
	if (!zyzgdj.trim().equals("")) {
		VIEW_SQL = VIEW_SQL + " and  R.ZYZGDJLEVEL  ='"	+ zyzgdj + "' ";
	}
	if (!empID.trim().equals("")) {
		VIEW_SQL = VIEW_SQL + " AND h.deptid  in  (SELECT DISTINCT  "
				+ " deptid  FROM  HR_DEPARTMENT " 
				+ " START WITH deptid = (select deptid from hr_employee where person_id='"
				+ empID + "' ) CONNECT  BY PRIOR deptid= parent_dept_id )";
	}
	String sql = VIEW_SQL  	+ "order by  h.empid desc";
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	List lEvsEmp = new Vector();
	try {
		con = services.getConnection();
		ps = con.prepareStatement(sql);

		//ps.setString(1, period);
		//ps.setString(2, master);
		rs = ps.executeQuery();
		while (rs.next()) {
			EvsEmp evsEmp = new EvsEmp();
			evsEmp.setEVS_EMPID(rs.getString("evs_empid"));
			evsEmp.setEvDeptID(rs.getString("ev_dept_id"));
			evsEmp.setEvDeptName(rs.getString("ev_dept_name"));
			evsEmp.setEvGradeName(rs.getString("ev_grade_name"));
			evsEmp.setEvEmpID(rs.getString("ev_emp_id"));
			evsEmp.setEvEmpName(rs.getString("ev_emp_name"));
			evsEmp.setCRAFT(rs.getString("CRAFT"));
		    evsEmp.setSUMJCCOUNT(rs.getString("SUMJCCOUNT"));
		    evsEmp.setSUMSCORE(rs.getString("SUMSCORE"));
		    evsEmp.setZYZGDJLEVEL(rs.getString("ZYZGDJLEVEL"));
			lEvsEmp.add(evsEmp);
		}

	} catch (SQLException sqle) {
		sqle.printStackTrace();
		throw new DataAccessException(
				"cant execute query for getEvEmpsByMasterPeriod statistics",
				sqle);
	} catch (ServiceLocatorException sle) {
		throw new DataAccessException(
				"cant get connection for getEvEmpsByMasterPeriod statistics",
				sle);
	} finally {
		SqlUtil.close(rs, ps, con);
	}
	return lEvsEmp;

}
	// 取得所以参与评价的员工的评价进行信息3
	public Integer getAllEvEmpsByMasterPeriod3(String empid) throws DataAccessException {
		String deptSql = "";
		String typeSql = "";
		String VIEW_SQL = " select nvl((SELECT count(r.evs_empid) " +
						  " FROM evs_setupcode r  group by r.evs_empid  " +
						  " having r.evs_empid = ?),0) from dual ";
		String sql = VIEW_SQL;
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int count=0;
		try {
			con = services.getConnection();
			ps = con.prepareStatement(sql);

			ps.setString(1, empid); 
			rs = ps.executeQuery();
			while (rs.next()) {
				count = rs.getInt(1);
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvEmpsByMasterPeriod statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvEmpsByMasterPeriod statistics",
					sle);
		} finally {
			SqlUtil.close(rs, ps, con);
		}
		return count;

	}
	
	
	private final static String GET_EVS_MASTER_APPEND = "SELECT * FROM evs_master"
			+ "	WHERE ev_period_id=?"
			+ "	AND ev_emp_id=?"
			+ "	AND ev_process_id=?";

	// 取得相应员工的业务加减分
	public EvsMaster getEvsMasterAppend(String evPeriod, String evEmp,
			String evProcess) throws DataAccessException {
		Connection con = null;
		PreparedStatement pstmt = null;
		EvsMaster evsMaster = null;
		ResultSet rs = null;
		try {
			con = services.getConnection();
			pstmt = con.prepareStatement(GET_EVS_MASTER_APPEND);
			pstmt.setString(1, evPeriod);
			pstmt.setString(2, evEmp);
			pstmt.setString(3, evProcess);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				evsMaster = new EvsMaster();
				evsMaster.setEvAppend(rs.getFloat("ev_append"));
				evsMaster.setEvAppendReason(rs.getString("ev_append_reason"));
				evsMaster.setEvEmpID(rs.getString("ev_emp_id"));
				evsMaster.setEvMaster(rs.getString("ev_master"));
			}

		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getEvsMasterAppend statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getEvsMasterAppend statistics",
					sle);
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return evsMaster;
	}

	private final static String ADD_APPEND_BY_MASTER = ""
			+ " UPDATE evs_master SET ev_append=? ,ev_append_reason=? "
			+ " WHERE ev_emp_id=?	" + " AND ev_period_id=? AND ev_process_id=?";

	public void addAppendByMaster(String evPeriod, String evEmp,
			String evProcess, String evAppendReason, float evAppend)
			throws DataAccessException {
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = services.getConnection();
			pstmt = con.prepareStatement(ADD_APPEND_BY_MASTER);
			pstmt.setFloat(1, evAppend);
			pstmt.setString(2, evAppendReason);
			pstmt.setString(3, evEmp);
			pstmt.setString(4, evPeriod);
			pstmt.setString(5, evProcess);
			pstmt.execute();
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for addAppendByMaster statistics", sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for addAppendByMaster statistics", sle);
		} finally {
			SqlUtil.close(pstmt, con);
		}

	}

	private final static String DEL_EVMASTER_BY_EMP_PERIOD = " DELETE evs_master WHERE ev_emp_id=? AND ev_period_id=? ";

	/**
	 * 删除相应员工评价期间的所有流程的操作者
	 * 
	 * @param con
	 * @param evEmpId
	 * @param evPeriodId
	 * @throws DataAccessException
	 */
	public void delEvEmpMaster(Connection con, String evEmpId, String evPeriodId)
			throws DataAccessException {
		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(DEL_EVMASTER_BY_EMP_PERIOD);
			pstmt.setString(1, evEmpId);
			pstmt.setString(2, evPeriodId);
			pstmt.executeUpdate();
		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for delEvEmpMaster statistics", sqle);
		} finally {
			SqlUtil.close(null, pstmt);
		}
	}
	/**
	 * 取当前流程之前所有分数
	 * @param evEmpId
	 * @param evPeriodId
	 * @param evProcessId
	 * @return
	 * @throws DataAccessException
	 */
	public List<EvsMaster> getPreMasterMark(String evEmpId,String evPeriodId,String evProcessId) throws DataAccessException{
	    	List<EvsMaster> lEvsMaster = new Vector<EvsMaster>();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		StringBuffer sql=new StringBuffer();
		sql.append(" SELECT * FROM EVS_MASTER_MARK_V  WHERE EV_EMP_ID=? ");
		sql.append("	AND EV_PERIOD_ID=? ");
		sql.append("	AND ev_process_order < ");
                sql.append("	(SELECT ev_process_order ");
                sql.append("		FROM evs_type_process ");
                sql.append("		WHERE evs_type_process.ev_type_id = evs_master_mark_v.ev_type_id ");
                sql.append("		AND evs_type_process.ev_period_id = evs_master_mark_v.ev_period_id ");
                sql.append("		AND evs_type_process.ev_process_id =? ) ");
                sql.append("  order by ev_process_order ");
		
		try {
			con = ServiceLocator.getInstance().getConnection();
			pstmt = con.prepareStatement(sql.toString());
			pstmt.setString(1, evEmpId);
			pstmt.setString(2, evPeriodId);
			pstmt.setString(3, evProcessId);
			Logger.getLogger(this.getClass()).debug(sql.toString());
			rs = pstmt.executeQuery();
			while (rs.next()) {
				EvsMaster evsMaster = new EvsMaster();
				evsMaster.setEvEmpID(rs.getString("ev_emp_id"));
				evsMaster.setEvEmpName(rs.getString("ev_emp_name"));
				evsMaster.setEvMaster(rs.getString("ev_master"));
				evsMaster.setEvMasterName(rs.getString("ev_master_name"));
				evsMaster.setEvProcessID(rs.getString("ev_process_id"));
				evsMaster.setEvProcessName(rs.getString("ev_process_name"));
				evsMaster.setEvMasterProcessMark(rs.getFloat("ev_marks"));
				lEvsMaster.add(evsMaster);
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getPreMasterMark statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getPreMasterMark statistics",
					sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return lEvsMaster;
	}
	/**
	 * 取当前流程之前所有分数
	 * @param evEmpId
	 * @param evPeriodId
	 * @param evProcessId
	 * @return
	 * @throws DataAccessException
	 */
	public EvsMaster getNextMasterMark(String evEmpId,String evPeriodId,String evProcessId) throws DataAccessException{
	    	EvsMaster evsMaster = new EvsMaster();
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		StringBuffer sql=new StringBuffer();
		sql.append(" SELECT * FROM EVS_MASTER_MARK_V  WHERE EV_EMP_ID=? ");
		sql.append("	AND EV_PERIOD_ID=? ");
		sql.append("	AND ev_process_order = ");
                sql.append("	(SELECT ev_process_order ");
                sql.append("		FROM evs_type_process ");
                sql.append("		WHERE evs_type_process.ev_type_id = evs_master_mark_v.ev_type_id ");
                sql.append("		AND evs_type_process.ev_period_id = evs_master_mark_v.ev_period_id ");
                sql.append("		AND evs_type_process.ev_process_id =? )+1 ");
                sql.append("  order by ev_process_order ");
		
		try {
			con = ServiceLocator.getInstance().getConnection();
			pstmt = con.prepareStatement(sql.toString());
			pstmt.setString(1, evEmpId);
			pstmt.setString(2, evPeriodId);
			pstmt.setString(3, evProcessId);
			rs = pstmt.executeQuery();
			Logger.getLogger(this.getClass()).debug(sql.toString());
			if (rs.next()) {
			
				evsMaster.setEvEmpID(rs.getString("ev_emp_id"));
				evsMaster.setEvEmpName(rs.getString("ev_emp_name"));
				evsMaster.setEvMaster(rs.getString("ev_master"));
				evsMaster.setEvMasterName(rs.getString("ev_master_name"));
				evsMaster.setEvProcessID(rs.getString("ev_process_id"));
				evsMaster.setEvProcessName(rs.getString("ev_process_name"));
				evsMaster.setEvMasterProcessMark(rs.getFloat("ev_marks"));
			}
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for getNextMasterMark statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			throw new DataAccessException(
					"cant get connection for getNextMasterMark statistics",
					sle);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SqlUtil.close(rs, pstmt, con);
		}
		return evsMaster;
	}
	private String evPeroidID;

	private String evEmpID;
	
	private String evEmpID1;

	private String evEmpName;

	private String evProcessID;

	private String evProcessName;

	private String evMaster;
	
	private String evMaster1;

	private String evMasterName;

	private int evAppendable;

	private String evAppendValue;

	private String evAppendName;

	private float evAppendDefault;

	private float evAppend;

	private String evAppendReason;

	private int evSubmitted;
	
	private float evMasterProcessMark;

	public float getEvMasterProcessMark() {
	    return evMasterProcessMark;
	}

	public void setEvMasterProcessMark(float evMasterProcessMark) {
	    this.evMasterProcessMark = evMasterProcessMark;
	}

	public String getEvEmpID1() {
		return evEmpID1;
	}

	public void setEvEmpID1(String evEmpID1) {
		this.evEmpID1 = evEmpID1;
	}

	public String getEvMaster1() {
		return evMaster1;
	}

	public void setEvMaster1(String evMaster1) {
		this.evMaster1 = evMaster1;
	}
	
}