/* Generated by Together */

package com.ait.evs;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.ait.util.DataAccessException;
import com.ait.util.ServiceLocator;
import com.ait.util.ServiceLocatorException;
import com.ait.util.SqlUtil;

public class EvsCommonItemDetail {
	private static ServiceLocator services;

	public EvsCommonItemDetail() {
		try {
			services = ServiceLocator.getInstance();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 增加共同项目
	public EvsCommonItemDetail(String evPeriodId, String evItemId,
			String evTypeId, float evDetailProp, List lEvCommonColumn) {
		this.evPeriodId = evPeriodId;
		this.evItemId = evItemId;
		this.evDetailProp = evDetailProp;
		this.evTypeId = evTypeId;
		this.lEvCommonColumn = lEvCommonColumn;
		try {
			services = ServiceLocator.getInstance();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 修改共同项目
	public EvsCommonItemDetail(int seq, float evDetailProp, List lEvCommonColumn) {
		this.seqEvCommonItemDetail = seq;
		this.evDetailProp = evDetailProp;
		this.lEvCommonColumn = lEvCommonColumn;
		try {
			services = ServiceLocator.getInstance();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 删除共同项目
	public EvsCommonItemDetail(int seq) {

		this.seqEvCommonItemDetail = seq;
		try {
			services = ServiceLocator.getInstance();
		} catch (ServiceLocatorException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @return 返回 evDetailProp。
	 */
	public float getEvDetailProp() {
		return evDetailProp;
	}

	/**
	 * @param evDetailProp
	 *            要设置的 evDetailProp。
	 */
	public void setEvDetailProp(float evDetailProp) {
		this.evDetailProp = evDetailProp;
	}

	/**
	 * @return 返回 evItemId。
	 */
	public String getEvItemId() {
		return evItemId;
	}

	/**
	 * @param evItemId
	 *            要设置的 evItemId。
	 */
	public void setEvItemId(String evItemId) {
		this.evItemId = evItemId;
	}

	/**
	 * @return 返回 evItemName。
	 */
	public String getEvItemName() {
		return evItemName;
	}

	/**
	 * @param evItemName
	 *            要设置的 evItemName。
	 */
	public void setEvItemName(String evItemName) {
		this.evItemName = evItemName;
	}

	/**
	 * @return 返回 evPeriodId。
	 */
	public String getEvPeriodId() {
		return evPeriodId;
	}

	/**
	 * @param evPeriodId
	 *            要设置的 evPeriodId。
	 */
	public void setEvPeriodId(String evPeriodId) {
		this.evPeriodId = evPeriodId;
	}

	/**
	 * @return 返回 evTypeId。
	 */
	public String getEvTypeId() {
		return evTypeId;
	}

	/**
	 * @param evTypeId
	 *            要设置的 evTypeId。
	 */
	public void setEvTypeId(String evTypeId) {
		this.evTypeId = evTypeId;
	}

	/**
	 * @return 返回 evTypeName。
	 */
	public String getEvTypeName() {
		return evTypeName;
	}

	/**
	 * @param evTypeName
	 *            要设置的 evTypeName。
	 */
	public void setEvTypeName(String evTypeName) {
		this.evTypeName = evTypeName;
	}

	/**
	 * @return 返回 seqEvCommonItemDetail。
	 */
	public int getSeqEvCommonItemDetail() {
		return seqEvCommonItemDetail;
	}

	/**
	 * @param seqEvCommonItemDetail
	 *            要设置的 seqEvCommonItemDetail。
	 */
	public void setSeqEvCommonItemDetail(int seqEvCommonItemDetail) {
		this.seqEvCommonItemDetail = seqEvCommonItemDetail;
	}

	/**
	 * @return 返回 lEvsCommonColumn。
	 */
	public List getLEvCommonColumn() {
		return lEvCommonColumn;
	}

	/**
	 * @param evsCommonColumn
	 *            要设置的 lEvsCommonColumn。
	 */
	public void setLEvsCommonColumn(List evCommonColumn) {
		lEvCommonColumn = evCommonColumn;
	}

	// 增加共同项目
	private String ADD_EV_COMMON_ITEM = " INSERT INTO evs_common_item_detail (seq_ev_common_item_detail,"
			+ " ev_period_id,ev_item_id,ev_detail_prop, ev_detail_order,ev_type_id)"
			+ " VALUES (seq_ev_common_item_detail.nextval,?,?,?,seq_ev_common_item_detail.nextval,?)";

	public void addEvCommonItem() throws DataAccessException {
		if (checkNull()) {
			return;
		}
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = services.getConnection();
			con.setAutoCommit(false);
			this.addEvCommonItem(con);
			con.commit();
		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for addEvCommonItem statistics", sqle);
		} catch (ServiceLocatorException sle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			throw new DataAccessException(
					"cant get connection for addEvCommonItem statistics", sle);
		} finally {
			SqlUtil.close(pstmt, con);
		}
	}

	public void addEvCommonItem(Connection con) throws DataAccessException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = con.prepareStatement(ADD_EV_COMMON_ITEM);
			pstmt.setString(1, this.evPeriodId);
			pstmt.setString(2, this.evItemId);
			pstmt.setFloat(3, this.evDetailProp);
			pstmt.setString(4, this.evTypeId);
			pstmt.execute();
			pstmt = null;

			pstmt = con
					.prepareStatement("SELECT seq_ev_common_item_detail.currval as seq FROM dual");
			rs = pstmt.executeQuery();
			this.seqEvCommonItemDetail = -1;
			if (rs.next()) {
				this.seqEvCommonItemDetail = rs.getInt("seq");
			}
			if (this.seqEvCommonItemDetail == -1) {
				con.rollback();
			} else {
				int evsCommonColumnSize = this.lEvCommonColumn.size();
				for (int i = 0; i < evsCommonColumnSize; i++) {
					EvsCommonColumn evCommonColumn = (EvsCommonColumn) lEvCommonColumn
							.get(i);
					evCommonColumn
							.setSeqEvCommonItemDetail(this.seqEvCommonItemDetail);
					evCommonColumn.addEvCommonColumn(con);
				}
			}
		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for addEvCommonItem statistics", sqle);
		} finally {
			SqlUtil.close(rs, pstmt);
		}

	}

	// 更新评价共同项项目
	private final static String UPDATE_EV_COMMON_ITEM = "UPDATE evs_common_item_detail SET ev_detail_prop=? WHERE seq_ev_common_item_detail=? ";

	public void updateEvCommonItem() throws DataAccessException {

		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = services.getConnection();
			con.setAutoCommit(false);
			this.updateEvCommonItem(con);
			con.commit();
		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for updateEvCommonItem statistics",
					sqle);
		} catch (ServiceLocatorException sle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			throw new DataAccessException(
					"cant get connection for updateEvCommonItem statistics",
					sle);
		} finally {
			SqlUtil.close(pstmt, con);
		}
	}

	public void updateEvCommonItem(Connection con) throws DataAccessException {

		PreparedStatement pstmt = null;
		try {
			pstmt = con.prepareStatement(UPDATE_EV_COMMON_ITEM);
			pstmt.setFloat(1, this.evDetailProp);
			pstmt.setInt(2, this.seqEvCommonItemDetail);
			pstmt.execute();
			int evsCommonColumnSize = this.lEvCommonColumn.size();
			for (int i = 0; i < evsCommonColumnSize; i++) {
				EvsCommonColumn evCommonColumn = (EvsCommonColumn) lEvCommonColumn
						.get(i);
				evCommonColumn
						.setSeqEvCommonItemDetail(this.seqEvCommonItemDetail);
				evCommonColumn.updateEvCommonColumn(con);
			}
		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for updateEvCommonItem statistics",
					sqle);
		} finally {
			SqlUtil.close(pstmt, null);
		}
	}

	// 删除评价共同项目
	private final static String DEL_EV_COMMON_ITEM = " DELETE evs_common_item_detail WHERE seq_ev_common_item_detail=?";

	public void delEvCommonItem() throws DataAccessException {
		Connection con = null;
		PreparedStatement pstmt = null;
		try {
			con = services.getConnection();
			con.setAutoCommit(false);
			this.delEvCommonItem(con);
			con.commit();
		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for delEvCommonItem statistics", sqle);
		} catch (ServiceLocatorException sle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			throw new DataAccessException(
					"cant get connection for delEvCommonItem statistics", sle);
		} finally {
			SqlUtil.close(pstmt, con);
		}
	}

	public void delEvCommonItem(Connection con) throws DataAccessException {

		PreparedStatement pstmt = null;
		try {
			pstmt = con.prepareStatement(DEL_EV_COMMON_ITEM);
			pstmt.setInt(1, this.seqEvCommonItemDetail);
			pstmt.execute();
			EvsCommonColumn evCommonColumn = new EvsCommonColumn(
					this.seqEvCommonItemDetail);
			evCommonColumn.delEvCommonColumn(con);

		} catch (SQLException sqle) {
			try {
				con.rollback();
			} catch (SQLException e) {
			}
			sqle.printStackTrace();
			throw new DataAccessException(
					"cant execute query for updateEvCommonItem statistics",
					sqle);
		} finally {
			SqlUtil.close(pstmt, null);
		}
	}

	private boolean checkNull() {
		if (evItemId == null || evItemId.equals("") || evPeriodId == null
				|| evPeriodId.equals("") || evTypeId == null
				|| evTypeId.equals("") || this.lEvCommonColumn == null) {
			return true;
		}
		return false;
	}

	private int seqEvCommonItemDetail;

	private String evPeriodId;

	private float evDetailProp;

	private String evItemId;

	private String evItemName;

	private String evTypeId;

	private String evTypeName;

	private List lEvCommonColumn;
}